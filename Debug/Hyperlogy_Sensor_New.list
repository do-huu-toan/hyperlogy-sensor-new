
Hyperlogy_Sensor_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800407c  0800407c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004120  08004120  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004120  08004120  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004120  08004120  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001030  2000001c  08004144  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000104c  08004144  0002104c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010597  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b6  00000000  00000000  000305e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00032ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00033b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020231  00000000  00000000  00034848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fee6  00000000  00000000  00054a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4698  00000000  00000000  0006495f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00128ff7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  0012904c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004064 	.word	0x08004064

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08004064 	.word	0x08004064

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000038 	.word	0x20000038
 8000200:	2000008c 	.word	0x2000008c

08000204 <napBit0>:
#define Buzzer_PORT GPIOA
#define Buzzer_PIN GPIO_PIN_2


void napBit0()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS_PORT, DS_PIN, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2104      	movs	r1, #4
 800020c:	4809      	ldr	r0, [pc, #36]	; (8000234 <napBit0+0x30>)
 800020e:	f001 f87d 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Shift_PORT, Shift_PIN, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2101      	movs	r1, #1
 8000216:	4807      	ldr	r0, [pc, #28]	; (8000234 <napBit0+0x30>)
 8000218:	f001 f878 	bl	800130c <HAL_GPIO_WritePin>
	//HAL_Delay(20);
	HAL_GPIO_WritePin(Shift_PORT, Shift_PIN, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <napBit0+0x30>)
 8000222:	f001 f873 	bl	800130c <HAL_GPIO_WritePin>
	//HAL_Delay(20);
	HAL_GPIO_WritePin(Shift_PORT, Shift_PIN, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2101      	movs	r1, #1
 800022a:	4802      	ldr	r0, [pc, #8]	; (8000234 <napBit0+0x30>)
 800022c:	f001 f86e 	bl	800130c <HAL_GPIO_WritePin>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	48000400 	.word	0x48000400

08000238 <napBit1>:
void napBit1()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS_PORT, DS_PIN, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2104      	movs	r1, #4
 8000240:	4809      	ldr	r0, [pc, #36]	; (8000268 <napBit1+0x30>)
 8000242:	f001 f863 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Shift_PORT, Shift_PIN, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	2101      	movs	r1, #1
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <napBit1+0x30>)
 800024c:	f001 f85e 	bl	800130c <HAL_GPIO_WritePin>
	//HAL_Delay(20);
	HAL_GPIO_WritePin(Shift_PORT, Shift_PIN, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2101      	movs	r1, #1
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <napBit1+0x30>)
 8000256:	f001 f859 	bl	800130c <HAL_GPIO_WritePin>
	//HAL_Delay(20);
	HAL_GPIO_WritePin(Shift_PORT, Shift_PIN, GPIO_PIN_RESET);
 800025a:	2200      	movs	r2, #0
 800025c:	2101      	movs	r1, #1
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <napBit1+0x30>)
 8000260:	f001 f854 	bl	800130c <HAL_GPIO_WritePin>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	48000400 	.word	0x48000400

0800026c <xoaBoNho>:
void xoaBoNho()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
	for(int i = 0;i < 8;i++)
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	e004      	b.n	8000282 <xoaBoNho+0x16>
	{
		napBit1();
 8000278:	f7ff ffde 	bl	8000238 <napBit1>
	for(int i = 0;i < 8;i++)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2b07      	cmp	r3, #7
 8000286:	ddf7      	ble.n	8000278 <xoaBoNho+0xc>
	}
}
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <led7DoanInit>:
void led7DoanInit()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS_PORT, DS_PIN, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2104      	movs	r1, #4
 800029c:	4808      	ldr	r0, [pc, #32]	; (80002c0 <led7DoanInit+0x2c>)
 800029e:	f001 f835 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Shift_PORT, Shift_PIN, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2101      	movs	r1, #1
 80002a6:	4806      	ldr	r0, [pc, #24]	; (80002c0 <led7DoanInit+0x2c>)
 80002a8:	f001 f830 	bl	800130c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Clock_PORT, Clock_PIN, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2102      	movs	r1, #2
 80002b0:	4803      	ldr	r0, [pc, #12]	; (80002c0 <led7DoanInit+0x2c>)
 80002b2:	f001 f82b 	bl	800130c <HAL_GPIO_WritePin>
	xoaBoNho();
 80002b6:	f7ff ffd9 	bl	800026c <xoaBoNho>
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	48000400 	.word	0x48000400

080002c4 <convert>:
void convert(uint8_t data)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
	uint8_t x;
	for(int i = 0;i<7;i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	e016      	b.n	8000302 <convert+0x3e>
	{
		if(data & 0x80)x = 1;
 80002d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	da02      	bge.n	80002e2 <convert+0x1e>
 80002dc:	2301      	movs	r3, #1
 80002de:	73fb      	strb	r3, [r7, #15]
 80002e0:	e001      	b.n	80002e6 <convert+0x22>
		else x = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	73fb      	strb	r3, [r7, #15]
		if(x==0)
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d102      	bne.n	80002f2 <convert+0x2e>
		{
			napBit1();
 80002ec:	f7ff ffa4 	bl	8000238 <napBit1>
 80002f0:	e001      	b.n	80002f6 <convert+0x32>
		}
		else
		{
			napBit0();
 80002f2:	f7ff ff87 	bl	8000204 <napBit0>
		}
		data = data<<1;
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<7;i++)
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	3301      	adds	r3, #1
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	2b06      	cmp	r3, #6
 8000306:	dde5      	ble.n	80002d4 <convert+0x10>
	}
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <hienThi>:
void hienThi()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Clock_PORT, Clock_PIN, GPIO_PIN_SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2102      	movs	r1, #2
 800031c:	4804      	ldr	r0, [pc, #16]	; (8000330 <hienThi+0x1c>)
 800031e:	f000 fff5 	bl	800130c <HAL_GPIO_WritePin>
	//HAL_Delay(20);
	HAL_GPIO_WritePin(Clock_PORT, Clock_PIN, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2102      	movs	r1, #2
 8000326:	4802      	ldr	r0, [pc, #8]	; (8000330 <hienThi+0x1c>)
 8000328:	f000 fff0 	bl	800130c <HAL_GPIO_WritePin>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	48000400 	.word	0x48000400

08000334 <show>:
uint8_t data[] = {0b01111110,0b00001100,0b10110110,0b10011110,0b11001100,0b11011010,0b11111010,0b00001110,0b11111110,0b11011110};
int dataUpdate;
void show(float a)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	ed87 0a01 	vstr	s0, [r7, #4]
	for(int j=1;j<=24;j++)
 800033e:	2301      	movs	r3, #1
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e051      	b.n	80003e8 <show+0xb4>
	{
		xoaBoNho();
 8000344:	f7ff ff92 	bl	800026c <xoaBoNho>
		convert(data[(int)a/10]);
 8000348:	edd7 7a01 	vldr	s15, [r7, #4]
 800034c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000350:	ee17 1a90 	vmov	r1, s15
 8000354:	4b28      	ldr	r3, [pc, #160]	; (80003f8 <show+0xc4>)
 8000356:	fb83 2301 	smull	r2, r3, r3, r1
 800035a:	109a      	asrs	r2, r3, #2
 800035c:	17cb      	asrs	r3, r1, #31
 800035e:	1ad3      	subs	r3, r2, r3
 8000360:	4a26      	ldr	r2, [pc, #152]	; (80003fc <show+0xc8>)
 8000362:	5cd3      	ldrb	r3, [r2, r3]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffad 	bl	80002c4 <convert>
		hienThi();
 800036a:	f7ff ffd3 	bl	8000314 <hienThi>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2110      	movs	r1, #16
 8000372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000376:	f000 ffc9 	bl	800130c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 800037a:	2005      	movs	r0, #5
 800037c:	f000 fd32 	bl	8000de4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2110      	movs	r1, #16
 8000384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000388:	f000 ffc0 	bl	800130c <HAL_GPIO_WritePin>

		xoaBoNho();
 800038c:	f7ff ff6e 	bl	800026c <xoaBoNho>
		convert(data[(int)a%10]);
 8000390:	edd7 7a01 	vldr	s15, [r7, #4]
 8000394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000398:	ee17 1a90 	vmov	r1, s15
 800039c:	4b16      	ldr	r3, [pc, #88]	; (80003f8 <show+0xc4>)
 800039e:	fb83 2301 	smull	r2, r3, r3, r1
 80003a2:	109a      	asrs	r2, r3, #2
 80003a4:	17cb      	asrs	r3, r1, #31
 80003a6:	1ad2      	subs	r2, r2, r3
 80003a8:	4613      	mov	r3, r2
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	4413      	add	r3, r2
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	1aca      	subs	r2, r1, r3
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <show+0xc8>)
 80003b4:	5c9b      	ldrb	r3, [r3, r2]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff84 	bl	80002c4 <convert>
		hienThi();
 80003bc:	f7ff ffaa 	bl	8000314 <hienThi>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f000 ff9f 	bl	800130c <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80003ce:	2005      	movs	r0, #5
 80003d0:	f000 fd08 	bl	8000de4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003de:	f000 ff95 	bl	800130c <HAL_GPIO_WritePin>
	for(int j=1;j<=24;j++)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3301      	adds	r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2b18      	cmp	r3, #24
 80003ec:	ddaa      	ble.n	8000344 <show+0x10>
	}
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	66666667 	.word	0x66666667
 80003fc:	20000000 	.word	0x20000000

08000400 <playBipBip>:

void playBipBip()
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
	for(int i = 0;i < 10;i++)
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	e014      	b.n	8000436 <playBipBip+0x36>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2104      	movs	r1, #4
 8000410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000414:	f000 ff7a 	bl	800130c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000418:	2064      	movs	r0, #100	; 0x64
 800041a:	f000 fce3 	bl	8000de4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2104      	movs	r1, #4
 8000422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000426:	f000 ff71 	bl	800130c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800042a:	2064      	movs	r0, #100	; 0x64
 800042c:	f000 fcda 	bl	8000de4 <HAL_Delay>
	for(int i = 0;i < 10;i++)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3301      	adds	r3, #1
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b09      	cmp	r3, #9
 800043a:	dde7      	ble.n	800040c <playBipBip+0xc>
	}
}
 800043c:	bf00      	nop
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <main>:

dht11_t dht;
float temp;
uint8_t keu = 0;
int main(void)
{
 8000448:	b5b0      	push	{r4, r5, r7, lr}
 800044a:	b096      	sub	sp, #88	; 0x58
 800044c:	af00      	add	r7, sp, #0

  HAL_Init();
 800044e:	f000 fc63 	bl	8000d18 <HAL_Init>
  SystemClock_Config();
 8000452:	f000 f85b 	bl	800050c <SystemClock_Config>
  MX_GPIO_Init();
 8000456:	f000 f8e7 	bl	8000628 <MX_GPIO_Init>
  MX_TIM2_Init();
 800045a:	f000 f897 	bl	800058c <MX_TIM2_Init>
  //Khởi tạo DHT11:
  init_dht11(&dht, &htim2, GPIOB, GPIO_PIN_12);
 800045e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000462:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <main+0xa0>)
 8000464:	4921      	ldr	r1, [pc, #132]	; (80004ec <main+0xa4>)
 8000466:	4822      	ldr	r0, [pc, #136]	; (80004f0 <main+0xa8>)
 8000468:	f000 fa8d 	bl	8000986 <init_dht11>
  readDHT11(&dht);
 800046c:	4820      	ldr	r0, [pc, #128]	; (80004f0 <main+0xa8>)
 800046e:	f000 fadb 	bl	8000a28 <readDHT11>

  osThreadDef(Task1, StartDefaultTask, osPriorityIdle, 0, 128);
 8000472:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <main+0xac>)
 8000474:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000478:	461d      	mov	r5, r3
 800047a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800047c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000486:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800048a:	2100      	movs	r1, #0
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fb7c 	bl	8002b8a <osThreadCreate>
 8000492:	4603      	mov	r3, r0
 8000494:	4a18      	ldr	r2, [pc, #96]	; (80004f8 <main+0xb0>)
 8000496:	6013      	str	r3, [r2, #0]

  osThreadDef(Task2, StartTask02, osPriorityIdle, 1, 128);
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <main+0xb4>)
 800049a:	f107 0420 	add.w	r4, r7, #32
 800049e:	461d      	mov	r5, r3
 80004a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80004ac:	f107 0320 	add.w	r3, r7, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fb69 	bl	8002b8a <osThreadCreate>
 80004b8:	4603      	mov	r3, r0
 80004ba:	4a11      	ldr	r2, [pc, #68]	; (8000500 <main+0xb8>)
 80004bc:	6013      	str	r3, [r2, #0]

  osThreadDef(Task3, StartTask03, osPriorityIdle, 2, 128);
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <main+0xbc>)
 80004c0:	1d3c      	adds	r4, r7, #4
 80004c2:	461d      	mov	r5, r3
 80004c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2100      	movs	r1, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f002 fb58 	bl	8002b8a <osThreadCreate>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <main+0xc0>)
 80004de:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80004e0:	f002 fb4c 	bl	8002b7c <osKernelStart>

  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x9c>
 80004e6:	bf00      	nop
 80004e8:	48000400 	.word	0x48000400
 80004ec:	20000ffc 	.word	0x20000ffc
 80004f0:	20000fe4 	.word	0x20000fe4
 80004f4:	08004094 	.word	0x08004094
 80004f8:	20000fe0 	.word	0x20000fe0
 80004fc:	080040b0 	.word	0x080040b0
 8000500:	20000ff8 	.word	0x20000ff8
 8000504:	080040cc 	.word	0x080040cc
 8000508:	20000ff4 	.word	0x20000ff4

0800050c <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fd9a 	bl	8004054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052e:	2302      	movs	r3, #2
 8000530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2300      	movs	r3, #0
 8000540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000542:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000546:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fef5 	bl	800133c <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000558:	f000 f96a 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000560:	2302      	movs	r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2101      	movs	r1, #1
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fde9 	bl	800214c <HAL_RCC_ClockConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000580:	f000 f956 	bl	8000830 <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	3740      	adds	r7, #64	; 0x40
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_TIM2_Init+0x98>)
 80005ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_TIM2_Init+0x98>)
 80005b4:	221f      	movs	r2, #31
 80005b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_TIM2_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_TIM2_Init+0x98>)
 80005c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80005c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_TIM2_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_TIM2_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005d2:	4814      	ldr	r0, [pc, #80]	; (8000624 <MX_TIM2_Init+0x98>)
 80005d4:	f001 ffa0 	bl	8002518 <HAL_TIM_Base_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005de:	f000 f927 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_TIM2_Init+0x98>)
 80005f0:	f002 f865 	bl	80026be <HAL_TIM_ConfigClockSource>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005fa:	f000 f919 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80005fe:	2320      	movs	r3, #32
 8000600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_TIM2_Init+0x98>)
 800060c:	f002 fa30 	bl	8002a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000616:	f000 f90b 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000ffc 	.word	0x20000ffc

08000628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <MX_GPIO_Init+0x114>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a3e      	ldr	r2, [pc, #248]	; (800073c <MX_GPIO_Init+0x114>)
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	6153      	str	r3, [r2, #20]
 800064a:	4b3c      	ldr	r3, [pc, #240]	; (800073c <MX_GPIO_Init+0x114>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b39      	ldr	r3, [pc, #228]	; (800073c <MX_GPIO_Init+0x114>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a38      	ldr	r2, [pc, #224]	; (800073c <MX_GPIO_Init+0x114>)
 800065c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b36      	ldr	r3, [pc, #216]	; (800073c <MX_GPIO_Init+0x114>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800066e:	2200      	movs	r2, #0
 8000670:	f248 013c 	movw	r1, #32828	; 0x803c
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 fe48 	bl	800130c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800067c:	2200      	movs	r2, #0
 800067e:	218f      	movs	r1, #143	; 0x8f
 8000680:	482f      	ldr	r0, [pc, #188]	; (8000740 <MX_GPIO_Init+0x118>)
 8000682:	f000 fe43 	bl	800130c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000686:	f248 0304 	movw	r3, #32772	; 0x8004
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a2:	f000 fca9 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80006a6:	2338      	movs	r3, #56	; 0x38
 80006a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f000 fc9a 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006c4:	2307      	movs	r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	4819      	ldr	r0, [pc, #100]	; (8000740 <MX_GPIO_Init+0x118>)
 80006dc:	f000 fc8c 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4619      	mov	r1, r3
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_GPIO_Init+0x118>)
 80006f6:	f000 fc7f 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006fa:	2308      	movs	r3, #8
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000702:	2301      	movs	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4619      	mov	r1, r3
 8000710:	480b      	ldr	r0, [pc, #44]	; (8000740 <MX_GPIO_Init+0x118>)
 8000712:	f000 fc71 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0x118>)
 800072e:	f000 fc63 	bl	8000ff8 <HAL_GPIO_Init>

}
 8000732:	bf00      	nop
 8000734:	3720      	adds	r7, #32
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	48000400 	.word	0x48000400

08000744 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  	osDelay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f002 fa68 	bl	8002c22 <osDelay>
	  	readDHT11(&dht);
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <StartDefaultTask+0x28>)
 8000754:	f000 f968 	bl	8000a28 <readDHT11>
	  	temp = dht.temperature;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <StartDefaultTask+0x28>)
 800075a:	7b1b      	ldrb	r3, [r3, #12]
 800075c:	ee07 3a90 	vmov	s15, r3
 8000760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <StartDefaultTask+0x2c>)
 8000766:	edc3 7a00 	vstr	s15, [r3]
	  	osDelay(1);
 800076a:	e7ef      	b.n	800074c <StartDefaultTask+0x8>
 800076c:	20000fe4 	.word	0x20000fe4
 8000770:	20000fd8 	.word	0x20000fd8

08000774 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  //Tắt 2 LED:
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2110      	movs	r1, #16
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f000 fdc2 	bl	800130c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000792:	f000 fdbb 	bl	800130c <HAL_GPIO_WritePin>
  led7DoanInit();
 8000796:	f7ff fd7d 	bl	8000294 <led7DoanInit>
  for(;;)
  {
      osDelay(1);
 800079a:	2001      	movs	r0, #1
 800079c:	f002 fa41 	bl	8002c22 <osDelay>
      show(temp);
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <StartTask02+0x3c>)
 80007a2:	edd3 7a00 	vldr	s15, [r3]
 80007a6:	eeb0 0a67 	vmov.f32	s0, s15
 80007aa:	f7ff fdc3 	bl	8000334 <show>
      osDelay(1);
 80007ae:	e7f4      	b.n	800079a <StartTask02+0x26>
 80007b0:	20000fd8 	.word	0x20000fd8

080007b4 <StartTask03>:
  }

}

void StartTask03(void const * argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  //Tắt 2 LED:

	  int state = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
	  int lastState = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
	  uint32_t time = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
	  //uint32_t time_refresh;
	  //uint8_t sounded = 0;
	  for(;;)
	  {
		  if(temp < 27.0)
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <StartTask03+0x74>)
 80007ca:	edd3 7a00 	vldr	s15, [r3]
 80007ce:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 80007d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007da:	d502      	bpl.n	80007e2 <StartTask03+0x2e>
		  {
			  	state = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	e001      	b.n	80007e6 <StartTask03+0x32>

			  //playBipBip();

		  }
		  else state = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
		  if(state !=  lastState)
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d00f      	beq.n	800080e <StartTask03+0x5a>
		  {
		  	if(state == 1)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d10a      	bne.n	800080a <StartTask03+0x56>
		  	{
		  		if(HAL_GetTick() - time > 5*60*1000) //Nếu nhiệt độ < 27 và từ lúc < 27 đến hiện tại lớn hơn 5p
 80007f4:	f000 faea 	bl	8000dcc <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <StartTask03+0x78>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d902      	bls.n	800080a <StartTask03+0x56>
		  		{
		  			time = HAL_GetTick();
 8000804:	f000 fae2 	bl	8000dcc <HAL_GetTick>
 8000808:	60f8      	str	r0, [r7, #12]
		  		}

		  		//time_refresh = time;
		  	}
		  	lastState = state;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	613b      	str	r3, [r7, #16]
		  }
		  if(HAL_GetTick() - time <= 5000)
 800080e:	f000 fadd 	bl	8000dcc <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	f241 3288 	movw	r2, #5000	; 0x1388
 800081c:	4293      	cmp	r3, r2
 800081e:	d8d3      	bhi.n	80007c8 <StartTask03+0x14>
		  {
			  playBipBip();
 8000820:	f7ff fdee 	bl	8000400 <playBipBip>
		  if(temp < 27.0)
 8000824:	e7d0      	b.n	80007c8 <StartTask03+0x14>
 8000826:	bf00      	nop
 8000828:	20000fd8 	.word	0x20000fd8
 800082c:	000493e0 	.word	0x000493e0

08000830 <Error_Handler>:
	  }

}

void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop

  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <HAL_MspInit+0x4c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a10      	ldr	r2, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <HAL_MspInit+0x4c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_MspInit+0x4c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	210f      	movs	r1, #15
 8000876:	f06f 0001 	mvn.w	r0, #1
 800087a:	f000 fb94 	bl	8000fa6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000

0800088c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800089c:	d10b      	bne.n	80008b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_TIM_Base_MspInit+0x38>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 fa54 	bl	8000da4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008fc:	f002 ff18 	bl	8003730 <xTaskGetSchedulerState>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d001      	beq.n	800090a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000906:	f003 f957 	bl	8003bb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490e      	ldr	r1, [pc, #56]	; (8000974 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0b      	ldr	r4, [pc, #44]	; (8000980 <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800095e:	f7ff ffd7 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000962:	f003 fb53 	bl	800400c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000966:	f7ff fd6f 	bl	8000448 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800096c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000978:	08004128 	.word	0x08004128
  ldr r2, =_sbss
 800097c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000980:	2000104c 	.word	0x2000104c

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>

08000986 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8000986:	b480      	push	{r7}
 8000988:	b085      	sub	sp, #20
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	609a      	str	r2, [r3, #8]
	dht->port = port;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	887a      	ldrh	r2, [r7, #2]
 80009a4:	809a      	strh	r2, [r3, #4]
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b088      	sub	sp, #32
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d111      	bne.n	80009f8 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	889b      	ldrh	r3, [r3, #4]
 80009d8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f107 020c 	add.w	r2, r7, #12
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fb01 	bl	8000ff8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 80009f6:	e013      	b.n	8000a20 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	889b      	ldrh	r3, [r3, #4]
 8000a02:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f107 020c 	add.w	r2, r7, #12
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 faec 	bl	8000ff8 <HAL_GPIO_Init>
}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000a34:	2300      	movs	r3, #0
 8000a36:	86bb      	strh	r3, [r7, #52]	; 0x34
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000a44:	2300      	movs	r3, #0
 8000a46:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8000a50:	2300      	movs	r3, #0
 8000a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 8000a56:	2101      	movs	r1, #1
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ffaa 	bl	80009b2 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f000 fc4f 	bl	800130c <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8000a6e:	2012      	movs	r0, #18
 8000a70:	f000 f9b8 	bl	8000de4 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fda3 	bl	80025c8 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 8000a82:	2100      	movs	r1, #0
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff94 	bl	80009b2 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000a94:	e00b      	b.n	8000aae <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000aa4:	d903      	bls.n	8000aae <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 8000aa6:	b662      	cpsie	i
}
 8000aa8:	bf00      	nop
			__enable_irq();
			return 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e130      	b.n	8000d10 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	889b      	ldrh	r3, [r3, #4]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4610      	mov	r0, r2
 8000aba:	f000 fc0f 	bl	80012dc <HAL_GPIO_ReadPin>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d0e8      	beq.n	8000a96 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000ace:	e00b      	b.n	8000ae8 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ade:	d903      	bls.n	8000ae8 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ae0:	b662      	cpsie	i
}
 8000ae2:	bf00      	nop
			__enable_irq();
			return 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e113      	b.n	8000d10 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	889b      	ldrh	r3, [r3, #4]
 8000af0:	4619      	mov	r1, r3
 8000af2:	4610      	mov	r0, r2
 8000af4:	f000 fbf2 	bl	80012dc <HAL_GPIO_ReadPin>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0e8      	beq.n	8000ad0 <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000b12:	e00b      	b.n	8000b2c <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b22:	d903      	bls.n	8000b2c <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b24:	b662      	cpsie	i
}
 8000b26:	bf00      	nop
			__enable_irq();
			return 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e0f1      	b.n	8000d10 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	889b      	ldrh	r3, [r3, #4]
 8000b34:	4619      	mov	r1, r3
 8000b36:	4610      	mov	r0, r2
 8000b38:	f000 fbd0 	bl	80012dc <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d0e8      	beq.n	8000b14 <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8000b4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b4e:	2b4a      	cmp	r3, #74	; 0x4a
 8000b50:	d80c      	bhi.n	8000b6c <readDHT11+0x144>
 8000b52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000b54:	2b55      	cmp	r3, #85	; 0x55
 8000b56:	d909      	bls.n	8000b6c <readDHT11+0x144>
 8000b58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b5a:	2b4a      	cmp	r3, #74	; 0x4a
 8000b5c:	d806      	bhi.n	8000b6c <readDHT11+0x144>
 8000b5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000b60:	2b55      	cmp	r3, #85	; 0x55
 8000b62:	d903      	bls.n	8000b6c <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b64:	b662      	cpsie	i
}
 8000b66:	bf00      	nop
	{
		__enable_irq();
		return 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e0d1      	b.n	8000d10 <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8000b70:	e05d      	b.n	8000c2e <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000b7c:	e00b      	b.n	8000b96 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b8c:	d903      	bls.n	8000b96 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b8e:	b662      	cpsie	i
}
 8000b90:	bf00      	nop
				__enable_irq();
				return 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e0bc      	b.n	8000d10 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4610      	mov	r0, r2
 8000ba2:	f000 fb9b 	bl	80012dc <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0e8      	beq.n	8000b7e <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000bb6:	e00b      	b.n	8000bd0 <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bc6:	d903      	bls.n	8000bd0 <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bc8:	b662      	cpsie	i
}
 8000bca:	bf00      	nop
				__enable_irq();
				return 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e09f      	b.n	8000d10 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	889b      	ldrh	r3, [r3, #4]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4610      	mov	r0, r2
 8000bdc:	f000 fb7e 	bl	80012dc <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d0e8      	beq.n	8000bb8 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bee:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 8000bf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000bf2:	2b14      	cmp	r3, #20
 8000bf4:	d906      	bls.n	8000c04 <readDHT11+0x1dc>
 8000bf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000bf8:	2b1d      	cmp	r3, #29
 8000bfa:	d803      	bhi.n	8000c04 <readDHT11+0x1dc>
		{
			mBit = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000c02:	e008      	b.n	8000c16 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 8000c04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c06:	2b3c      	cmp	r3, #60	; 0x3c
 8000c08:	d905      	bls.n	8000c16 <readDHT11+0x1ee>
 8000c0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000c0c:	2b4f      	cmp	r3, #79	; 0x4f
 8000c0e:	d802      	bhi.n	8000c16 <readDHT11+0x1ee>
		{
			 mBit = 1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8000c16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000c1a:	b2d9      	uxtb	r1, r3
 8000c1c:	f107 0208 	add.w	r2, r7, #8
 8000c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c22:	4413      	add	r3, r2
 8000c24:	460a      	mov	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8000c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8000c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c30:	2b27      	cmp	r3, #39	; 0x27
 8000c32:	dd9e      	ble.n	8000b72 <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fd19 	bl	8002670 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c3e:	b662      	cpsie	i
}
 8000c40:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	643b      	str	r3, [r7, #64]	; 0x40
 8000c46:	e011      	b.n	8000c6c <readDHT11+0x244>
	{
		humVal += mData[i];
 8000c48:	f107 0208 	add.w	r2, r7, #8
 8000c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c4e:	4413      	add	r3, r2
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000c56:	4413      	add	r3, r2
 8000c58:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 8000c5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 8000c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c68:	3301      	adds	r3, #1
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	ddea      	ble.n	8000c48 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8000c72:	2310      	movs	r3, #16
 8000c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c76:	e011      	b.n	8000c9c <readDHT11+0x274>
	{
		tempVal += mData[i];
 8000c78:	f107 0208 	add.w	r2, r7, #8
 8000c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c7e:	4413      	add	r3, r2
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c86:	4413      	add	r3, r2
 8000c88:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 8000c8c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 8000c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c98:	3301      	adds	r3, #1
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c9e:	2b17      	cmp	r3, #23
 8000ca0:	ddea      	ble.n	8000c78 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ca6:	e011      	b.n	8000ccc <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 8000ca8:	f107 0208 	add.w	r2, r7, #8
 8000cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cae:	4413      	add	r3, r2
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cb6:	4413      	add	r3, r2
 8000cb8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 8000cbc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 8000cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc8:	3301      	adds	r3, #1
 8000cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cce:	2b27      	cmp	r3, #39	; 0x27
 8000cd0:	ddea      	ble.n	8000ca8 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 8000cd2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 8000cdc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ce0:	085b      	lsrs	r3, r3, #1
 8000ce2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 8000ce6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 8000cf0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000cf4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000cf8:	4413      	add	r3, r2
 8000cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000d04:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8000d0c:	735a      	strb	r2, [r3, #13]


	return 1;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3750      	adds	r7, #80	; 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x28>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x28>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f931 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f000 f808 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fd82 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_InitTick+0x54>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f93b 	bl	8000fde <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00e      	b.n	8000d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d80a      	bhi.n	8000d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f000 f911 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d84:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_InitTick+0x5c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000014 	.word	0x20000014
 8000da0:	20000010 	.word	0x20000010

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000014 	.word	0x20000014
 8000dc8:	20001048 	.word	0x20001048

08000dcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20001048 	.word	0x20001048

08000de4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff ffee 	bl	8000dcc <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e0a:	bf00      	nop
 8000e0c:	f7ff ffde 	bl	8000dcc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000014 	.word	0x20000014

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff47 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff5c 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffb0 	bl	8000f4c <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001006:	e14e      	b.n	80012a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	2101      	movs	r1, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8140 	beq.w	80012a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d00b      	beq.n	8001040 <HAL_GPIO_Init+0x48>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d007      	beq.n	8001040 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001034:	2b11      	cmp	r3, #17
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b12      	cmp	r3, #18
 800103e:	d130      	bne.n	80010a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001076:	2201      	movs	r2, #1
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	091b      	lsrs	r3, r3, #4
 800108c:	f003 0201 	and.w	r2, r3, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0xea>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b12      	cmp	r3, #18
 80010e0:	d123      	bne.n	800112a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	6939      	ldr	r1, [r7, #16]
 8001126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0203 	and.w	r2, r3, #3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 809a 	beq.w	80012a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116c:	4b55      	ldr	r3, [pc, #340]	; (80012c4 <HAL_GPIO_Init+0x2cc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a54      	ldr	r2, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x2cc>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b52      	ldr	r3, [pc, #328]	; (80012c4 <HAL_GPIO_Init+0x2cc>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001184:	4a50      	ldr	r2, [pc, #320]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ae:	d013      	beq.n	80011d8 <HAL_GPIO_Init+0x1e0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a46      	ldr	r2, [pc, #280]	; (80012cc <HAL_GPIO_Init+0x2d4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d00d      	beq.n	80011d4 <HAL_GPIO_Init+0x1dc>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a45      	ldr	r2, [pc, #276]	; (80012d0 <HAL_GPIO_Init+0x2d8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d007      	beq.n	80011d0 <HAL_GPIO_Init+0x1d8>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a44      	ldr	r2, [pc, #272]	; (80012d4 <HAL_GPIO_Init+0x2dc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d101      	bne.n	80011cc <HAL_GPIO_Init+0x1d4>
 80011c8:	2303      	movs	r3, #3
 80011ca:	e006      	b.n	80011da <HAL_GPIO_Init+0x1e2>
 80011cc:	2305      	movs	r3, #5
 80011ce:	e004      	b.n	80011da <HAL_GPIO_Init+0x1e2>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x1e2>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <HAL_GPIO_Init+0x1e2>
 80011d8:	2300      	movs	r3, #0
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	f002 0203 	and.w	r2, r2, #3
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	4093      	lsls	r3, r2
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ea:	4937      	ldr	r1, [pc, #220]	; (80012c8 <HAL_GPIO_Init+0x2d0>)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <HAL_GPIO_Init+0x2e0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121c:	4a2e      	ldr	r2, [pc, #184]	; (80012d8 <HAL_GPIO_Init+0x2e0>)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x2e0>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001246:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_GPIO_Init+0x2e0>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_GPIO_Init+0x2e0>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_GPIO_Init+0x2e0>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_GPIO_Init+0x2e0>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_GPIO_Init+0x2e0>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f aea9 	bne.w	8001008 <HAL_GPIO_Init+0x10>
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	40010400 	.word	0x40010400

080012dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001328:	e002      	b.n	8001330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001342:	af00      	add	r7, sp, #0
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	f000 bef4 	b.w	800213e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 816a 	beq.w	800163a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001366:	4bb3      	ldr	r3, [pc, #716]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b04      	cmp	r3, #4
 8001370:	d00c      	beq.n	800138c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001372:	4bb0      	ldr	r3, [pc, #704]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b08      	cmp	r3, #8
 800137c:	d159      	bne.n	8001432 <HAL_RCC_OscConfig+0xf6>
 800137e:	4bad      	ldr	r3, [pc, #692]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138a:	d152      	bne.n	8001432 <HAL_RCC_OscConfig+0xf6>
 800138c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001390:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013a0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x82>
 80013b8:	4b9e      	ldr	r3, [pc, #632]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0xae>
 80013be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013e6:	4b93      	ldr	r3, [pc, #588]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ee:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013f2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013f6:	fa92 f2a2 	rbit	r2, r2
 80013fa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013fe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001402:	fab2 f282 	clz	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f042 0220 	orr.w	r2, r2, #32
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f002 021f 	and.w	r2, r2, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 810c 	beq.w	8001638 <HAL_RCC_OscConfig+0x2fc>
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 8106 	bne.w	8001638 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	f000 be86 	b.w	800213e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d106      	bne.n	800144c <HAL_RCC_OscConfig+0x110>
 800143e:	4b7d      	ldr	r3, [pc, #500]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7c      	ldr	r2, [pc, #496]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e030      	b.n	80014ae <HAL_RCC_OscConfig+0x172>
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x134>
 8001456:	4b77      	ldr	r3, [pc, #476]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a76      	ldr	r2, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 800145c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b74      	ldr	r3, [pc, #464]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a73      	ldr	r2, [pc, #460]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e01e      	b.n	80014ae <HAL_RCC_OscConfig+0x172>
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147a:	d10c      	bne.n	8001496 <HAL_RCC_OscConfig+0x15a>
 800147c:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a6c      	ldr	r2, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b6a      	ldr	r3, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a69      	ldr	r2, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e00b      	b.n	80014ae <HAL_RCC_OscConfig+0x172>
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a66      	ldr	r2, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 800149c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b64      	ldr	r3, [pc, #400]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a63      	ldr	r2, [pc, #396]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 80014a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ae:	4b61      	ldr	r3, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	f023 020f 	bic.w	r2, r3, #15
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	495d      	ldr	r1, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d059      	beq.n	8001580 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fc7e 	bl	8000dcc <HAL_GetTick>
 80014d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d6:	f7ff fc79 	bl	8000dcc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d902      	bls.n	80014ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	f000 be29 	b.w	800213e <HAL_RCC_OscConfig+0xe02>
 80014ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014f8:	fa93 f3a3 	rbit	r3, r3
 80014fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001500:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d102      	bne.n	800151e <HAL_RCC_OscConfig+0x1e2>
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0x20e>
 800151e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001522:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001536:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800153a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800154e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001552:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001556:	fa92 f2a2 	rbit	r2, r2
 800155a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800155e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001562:	fab2 f282 	clz	r2, r2
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	f042 0220 	orr.w	r2, r2, #32
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	f002 021f 	and.w	r2, r2, #31
 8001572:	2101      	movs	r1, #1
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0ab      	beq.n	80014d6 <HAL_RCC_OscConfig+0x19a>
 800157e:	e05c      	b.n	800163a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fc24 	bl	8000dcc <HAL_GetTick>
 8001584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158a:	f7ff fc1f 	bl	8000dcc <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d902      	bls.n	80015a0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	f000 bdcf 	b.w	800213e <HAL_RCC_OscConfig+0xe02>
 80015a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d102      	bne.n	80015d2 <HAL_RCC_OscConfig+0x296>
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x2c2>
 80015d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015ee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_RCC_OscConfig+0x2f8>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001602:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001606:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800160a:	fa92 f2a2 	rbit	r2, r2
 800160e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001612:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001616:	fab2 f282 	clz	r2, r2
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	f042 0220 	orr.w	r2, r2, #32
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f002 021f 	and.w	r2, r2, #31
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ab      	bne.n	800158a <HAL_RCC_OscConfig+0x24e>
 8001632:	e002      	b.n	800163a <HAL_RCC_OscConfig+0x2fe>
 8001634:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 816f 	beq.w	8001928 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800164a:	4bd0      	ldr	r3, [pc, #832]	; (800198c <HAL_RCC_OscConfig+0x650>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001656:	4bcd      	ldr	r3, [pc, #820]	; (800198c <HAL_RCC_OscConfig+0x650>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b08      	cmp	r3, #8
 8001660:	d16c      	bne.n	800173c <HAL_RCC_OscConfig+0x400>
 8001662:	4bca      	ldr	r3, [pc, #808]	; (800198c <HAL_RCC_OscConfig+0x650>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d166      	bne.n	800173c <HAL_RCC_OscConfig+0x400>
 800166e:	2302      	movs	r3, #2
 8001670:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001680:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d102      	bne.n	800169e <HAL_RCC_OscConfig+0x362>
 8001698:	4bbc      	ldr	r3, [pc, #752]	; (800198c <HAL_RCC_OscConfig+0x650>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	e013      	b.n	80016c6 <HAL_RCC_OscConfig+0x38a>
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016b0:	2302      	movs	r3, #2
 80016b2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016ba:	fa93 f3a3 	rbit	r3, r3
 80016be:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016c2:	4bb2      	ldr	r3, [pc, #712]	; (800198c <HAL_RCC_OscConfig+0x650>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2202      	movs	r2, #2
 80016c8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016d0:	fa92 f2a2 	rbit	r2, r2
 80016d4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016d8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016dc:	fab2 f282 	clz	r2, r2
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	f042 0220 	orr.w	r2, r2, #32
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	f002 021f 	and.w	r2, r2, #31
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_RCC_OscConfig+0x3cc>
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d002      	beq.n	8001708 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	f000 bd1b 	b.w	800213e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4ba0      	ldr	r3, [pc, #640]	; (800198c <HAL_RCC_OscConfig+0x650>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	21f8      	movs	r1, #248	; 0xf8
 8001718:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001720:	fa91 f1a1 	rbit	r1, r1
 8001724:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001728:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800172c:	fab1 f181 	clz	r1, r1
 8001730:	b2c9      	uxtb	r1, r1
 8001732:	408b      	lsls	r3, r1
 8001734:	4995      	ldr	r1, [pc, #596]	; (800198c <HAL_RCC_OscConfig+0x650>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e0f5      	b.n	8001928 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8085 	beq.w	8001852 <HAL_RCC_OscConfig+0x516>
 8001748:	2301      	movs	r3, #1
 800174a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800175a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175e:	fab3 f383 	clz	r3, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	461a      	mov	r2, r3
 8001770:	2301      	movs	r3, #1
 8001772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb2a 	bl	8000dcc <HAL_GetTick>
 8001778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800177e:	f7ff fb25 	bl	8000dcc <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d902      	bls.n	8001794 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	f000 bcd5 	b.w	800213e <HAL_RCC_OscConfig+0xe02>
 8001794:	2302      	movs	r3, #2
 8001796:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	095b      	lsrs	r3, r3, #5
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d102      	bne.n	80017c4 <HAL_RCC_OscConfig+0x488>
 80017be:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x650>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	e013      	b.n	80017ec <HAL_RCC_OscConfig+0x4b0>
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80017e8:	4b68      	ldr	r3, [pc, #416]	; (800198c <HAL_RCC_OscConfig+0x650>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2202      	movs	r2, #2
 80017ee:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80017f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017f6:	fa92 f2a2 	rbit	r2, r2
 80017fa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80017fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001802:	fab2 f282 	clz	r2, r2
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f042 0220 	orr.w	r2, r2, #32
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0af      	beq.n	800177e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b5b      	ldr	r3, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x650>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	21f8      	movs	r1, #248	; 0xf8
 800182e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001836:	fa91 f1a1 	rbit	r1, r1
 800183a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800183e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001842:	fab1 f181 	clz	r1, r1
 8001846:	b2c9      	uxtb	r1, r1
 8001848:	408b      	lsls	r3, r1
 800184a:	4950      	ldr	r1, [pc, #320]	; (800198c <HAL_RCC_OscConfig+0x650>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e06a      	b.n	8001928 <HAL_RCC_OscConfig+0x5ec>
 8001852:	2301      	movs	r3, #1
 8001854:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001872:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	461a      	mov	r2, r3
 800187a:	2300      	movs	r3, #0
 800187c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff faa5 	bl	8000dcc <HAL_GetTick>
 8001882:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	e00a      	b.n	800189e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001888:	f7ff faa0 	bl	8000dcc <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d902      	bls.n	800189e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	f000 bc50 	b.w	800213e <HAL_RCC_OscConfig+0xe02>
 800189e:	2302      	movs	r3, #2
 80018a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_OscConfig+0x592>
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <HAL_RCC_OscConfig+0x650>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e013      	b.n	80018f6 <HAL_RCC_OscConfig+0x5ba>
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_RCC_OscConfig+0x650>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	2202      	movs	r2, #2
 80018f8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80018fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001900:	fa92 f2a2 	rbit	r2, r2
 8001904:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001908:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800190c:	fab2 f282 	clz	r2, r2
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f002 021f 	and.w	r2, r2, #31
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1af      	bne.n	8001888 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80da 	beq.w	8001aec <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d069      	beq.n	8001a16 <HAL_RCC_OscConfig+0x6da>
 8001942:	2301      	movs	r3, #1
 8001944:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x654>)
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	461a      	mov	r2, r3
 8001968:	2301      	movs	r3, #1
 800196a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff fa2e 	bl	8000dcc <HAL_GetTick>
 8001970:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001974:	e00e      	b.n	8001994 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001976:	f7ff fa29 	bl	8000dcc <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d906      	bls.n	8001994 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e3d9      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
 800198a:	bf00      	nop
 800198c:	40021000 	.word	0x40021000
 8001990:	10908120 	.word	0x10908120
 8001994:	2302      	movs	r3, #2
 8001996:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019c2:	2202      	movs	r2, #2
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4ba5      	ldr	r3, [pc, #660]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 80019d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019de:	2102      	movs	r1, #2
 80019e0:	6019      	str	r1, [r3, #0]
 80019e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f1a3 	rbit	r1, r3
 80019ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019f0:	6019      	str	r1, [r3, #0]
  return result;
 80019f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	2101      	movs	r1, #1
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0b0      	beq.n	8001976 <HAL_RCC_OscConfig+0x63a>
 8001a14:	e06a      	b.n	8001aec <HAL_RCC_OscConfig+0x7b0>
 8001a16:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fa93 f2a3 	rbit	r2, r3
 8001a28:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a2c:	601a      	str	r2, [r3, #0]
  return result;
 8001a2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a32:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x934>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	461a      	mov	r2, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff f9c0 	bl	8000dcc <HAL_GetTick>
 8001a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff f9bb 	bl	8000dcc <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e36b      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
 8001a66:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	6019      	str	r1, [r3, #0]
 8001aba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	fa93 f1a3 	rbit	r1, r3
 8001ac4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ac8:	6019      	str	r1, [r3, #0]
  return result;
 8001aca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1b2      	bne.n	8001a52 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8158 	beq.w	8001dac <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b5a      	ldr	r3, [pc, #360]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d112      	bne.n	8001b34 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a56      	ldr	r2, [pc, #344]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	4b54      	ldr	r3, [pc, #336]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <HAL_RCC_OscConfig+0x938>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11a      	bne.n	8001b76 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b40:	4b4c      	ldr	r3, [pc, #304]	; (8001c74 <HAL_RCC_OscConfig+0x938>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4b      	ldr	r2, [pc, #300]	; (8001c74 <HAL_RCC_OscConfig+0x938>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f93e 	bl	8000dcc <HAL_GetTick>
 8001b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	e009      	b.n	8001b6a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff f939 	bl	8000dcc <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e2e9      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6a:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCC_OscConfig+0x938>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0ef      	beq.n	8001b56 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x852>
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4a39      	ldr	r2, [pc, #228]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6213      	str	r3, [r2, #32]
 8001b8c:	e02f      	b.n	8001bee <HAL_RCC_OscConfig+0x8b2>
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x876>
 8001b98:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6213      	str	r3, [r2, #32]
 8001ba4:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001baa:	f023 0304 	bic.w	r3, r3, #4
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	e01d      	b.n	8001bee <HAL_RCC_OscConfig+0x8b2>
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d10c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x89a>
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	4b28      	ldr	r3, [pc, #160]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e00b      	b.n	8001bee <HAL_RCC_OscConfig+0x8b2>
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d06b      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f8e8 	bl	8000dcc <HAL_GetTick>
 8001bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00b      	b.n	8001c1a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff f8e3 	bl	8000dcc <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e291      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
 8001c1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c1e:	2202      	movs	r2, #2
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	fa93 f2a3 	rbit	r2, r3
 8001c2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c36:	2202      	movs	r2, #2
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c48:	601a      	str	r2, [r3, #0]
  return result;
 8001c4a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d109      	bne.n	8001c78 <HAL_RCC_OscConfig+0x93c>
 8001c64:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <HAL_RCC_OscConfig+0x930>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	e014      	b.n	8001c94 <HAL_RCC_OscConfig+0x958>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	10908120 	.word	0x10908120
 8001c74:	40007000 	.word	0x40007000
 8001c78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	4bbb      	ldr	r3, [pc, #748]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c98:	2102      	movs	r1, #2
 8001c9a:	6011      	str	r1, [r2, #0]
 8001c9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	fa92 f1a2 	rbit	r1, r2
 8001ca6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001caa:	6011      	str	r1, [r2, #0]
  return result;
 8001cac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f002 021f 	and.w	r2, r2, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d099      	beq.n	8001c02 <HAL_RCC_OscConfig+0x8c6>
 8001cce:	e063      	b.n	8001d98 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff f87c 	bl	8000dcc <HAL_GetTick>
 8001cd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cda:	f7ff f877 	bl	8000dcc <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e225      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
 8001cf2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	fa93 f2a3 	rbit	r2, r3
 8001d04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d20:	601a      	str	r2, [r3, #0]
  return result;
 8001d22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	fab3 f383 	clz	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_OscConfig+0xa06>
 8001d3c:	4b90      	ldr	r3, [pc, #576]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	e00d      	b.n	8001d5e <HAL_RCC_OscConfig+0xa22>
 8001d42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d46:	2202      	movs	r2, #2
 8001d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f2a3 	rbit	r2, r3
 8001d54:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d62:	2102      	movs	r1, #2
 8001d64:	6011      	str	r1, [r2, #0]
 8001d66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	fa92 f1a2 	rbit	r1, r2
 8001d70:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d74:	6011      	str	r1, [r2, #0]
  return result;
 8001d76:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1a0      	bne.n	8001cda <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da0:	4b77      	ldr	r3, [pc, #476]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4a76      	ldr	r2, [pc, #472]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001daa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 81c2 	beq.w	800213c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db8:	4b71      	ldr	r3, [pc, #452]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	f000 819c 	beq.w	80020fe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	f040 8114 	bne.w	8001ffa <HAL_RCC_OscConfig+0xcbe>
 8001dd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	fa93 f2a3 	rbit	r2, r3
 8001de6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dea:	601a      	str	r2, [r3, #0]
  return result;
 8001dec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001df0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	461a      	mov	r2, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7fe ffe0 	bl	8000dcc <HAL_GetTick>
 8001e0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e10:	e009      	b.n	8001e26 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e12:	f7fe ffdb 	bl	8000dcc <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e18b      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
 8001e26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e3e:	601a      	str	r2, [r3, #0]
  return result;
 8001e40:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_OscConfig+0xb24>
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e01b      	b.n	8001e98 <HAL_RCC_OscConfig+0xb5c>
 8001e60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fa93 f2a3 	rbit	r2, r3
 8001e8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e9c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ea0:	6011      	str	r1, [r2, #0]
 8001ea2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	fa92 f1a2 	rbit	r1, r2
 8001eac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001eb0:	6011      	str	r1, [r2, #0]
  return result;
 8001eb2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	fab2 f282 	clz	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f042 0220 	orr.w	r2, r2, #32
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f002 021f 	and.w	r2, r2, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d19e      	bne.n	8001e12 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	4925      	ldr	r1, [pc, #148]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
 8001ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ef4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f08:	601a      	str	r2, [r3, #0]
  return result;
 8001f0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f0e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	461a      	mov	r2, r3
 8001f22:	2301      	movs	r3, #1
 8001f24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe ff51 	bl	8000dcc <HAL_GetTick>
 8001f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2e:	e009      	b.n	8001f44 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe ff4c 	bl	8000dcc <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0fc      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
 8001f44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f5c:	601a      	str	r2, [r3, #0]
  return result;
 8001f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_OscConfig+0xc48>
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <HAL_RCC_OscConfig+0xc44>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e01e      	b.n	8001fbc <HAL_RCC_OscConfig+0xc80>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_OscConfig+0xe0c>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	fa92 f1a2 	rbit	r1, r2
 8001fd0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fd4:	6011      	str	r1, [r2, #0]
  return result;
 8001fd6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	fab2 f282 	clz	r2, r2
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f042 0220 	orr.w	r2, r2, #32
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f002 021f 	and.w	r2, r2, #31
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d09b      	beq.n	8001f30 <HAL_RCC_OscConfig+0xbf4>
 8001ff8:	e0a0      	b.n	800213c <HAL_RCC_OscConfig+0xe00>
 8001ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002002:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	fa93 f2a3 	rbit	r2, r3
 800200e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002012:	601a      	str	r2, [r3, #0]
  return result;
 8002014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002018:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002024:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	461a      	mov	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe fecc 	bl	8000dcc <HAL_GetTick>
 8002034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002038:	e009      	b.n	800204e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe fec7 	bl	8000dcc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e077      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
 800204e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002066:	601a      	str	r2, [r3, #0]
  return result;
 8002068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_RCC_OscConfig+0xd4c>
 8002082:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_RCC_OscConfig+0xe0c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e01b      	b.n	80020c0 <HAL_RCC_OscConfig+0xd84>
 8002088:	f107 0320 	add.w	r3, r7, #32
 800208c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f107 0320 	add.w	r3, r7, #32
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	f107 0318 	add.w	r3, r7, #24
 80020a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f107 0318 	add.w	r3, r7, #24
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	fa93 f2a3 	rbit	r2, r3
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	4b22      	ldr	r3, [pc, #136]	; (8002148 <HAL_RCC_OscConfig+0xe0c>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f107 0210 	add.w	r2, r7, #16
 80020c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020c8:	6011      	str	r1, [r2, #0]
 80020ca:	f107 0210 	add.w	r2, r7, #16
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	fa92 f1a2 	rbit	r1, r2
 80020d4:	f107 020c 	add.w	r2, r7, #12
 80020d8:	6011      	str	r1, [r2, #0]
  return result;
 80020da:	f107 020c 	add.w	r2, r7, #12
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	f042 0220 	orr.w	r2, r2, #32
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f002 021f 	and.w	r2, r2, #31
 80020f0:	2101      	movs	r1, #1
 80020f2:	fa01 f202 	lsl.w	r2, r1, r2
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d19e      	bne.n	800203a <HAL_RCC_OscConfig+0xcfe>
 80020fc:	e01e      	b.n	800213c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e018      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_RCC_OscConfig+0xe0c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002114:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	429a      	cmp	r2, r3
 8002124:	d108      	bne.n	8002138 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002126:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800212a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b09e      	sub	sp, #120	; 0x78
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e162      	b.n	800242a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b90      	ldr	r3, [pc, #576]	; (80023a8 <HAL_RCC_ClockConfig+0x25c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d910      	bls.n	8002194 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b8d      	ldr	r3, [pc, #564]	; (80023a8 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	498b      	ldr	r1, [pc, #556]	; (80023a8 <HAL_RCC_ClockConfig+0x25c>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <HAL_RCC_ClockConfig+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e14a      	b.n	800242a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	497f      	ldr	r1, [pc, #508]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80dc 	beq.w	8002378 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d13c      	bne.n	8002242 <HAL_RCC_ClockConfig+0xf6>
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d8:	fab3 f383 	clz	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xa6>
 80021ec:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e00f      	b.n	8002212 <HAL_RCC_ClockConfig+0xc6>
 80021f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021fa:	fa93 f3a3 	rbit	r3, r3
 80021fe:	667b      	str	r3, [r7, #100]	; 0x64
 8002200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002204:	663b      	str	r3, [r7, #96]	; 0x60
 8002206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002216:	65ba      	str	r2, [r7, #88]	; 0x58
 8002218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800221a:	fa92 f2a2 	rbit	r2, r2
 800221e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002222:	fab2 f282 	clz	r2, r2
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f042 0220 	orr.w	r2, r2, #32
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	f002 021f 	and.w	r2, r2, #31
 8002232:	2101      	movs	r1, #1
 8002234:	fa01 f202 	lsl.w	r2, r1, r2
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d17b      	bne.n	8002336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0f3      	b.n	800242a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d13c      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x178>
 800224a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_RCC_ClockConfig+0x128>
 800226e:	4b4f      	ldr	r3, [pc, #316]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e00f      	b.n	8002294 <HAL_RCC_ClockConfig+0x148>
 8002274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	647b      	str	r3, [r7, #68]	; 0x44
 8002282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
 8002288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002298:	63ba      	str	r2, [r7, #56]	; 0x38
 800229a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800229c:	fa92 f2a2 	rbit	r2, r2
 80022a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a4:	fab2 f282 	clz	r2, r2
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f002 021f 	and.w	r2, r2, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d13a      	bne.n	8002336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0b2      	b.n	800242a <HAL_RCC_ClockConfig+0x2de>
 80022c4:	2302      	movs	r3, #2
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d102      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1a0>
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e00d      	b.n	8002308 <HAL_RCC_ClockConfig+0x1bc>
 80022ec:	2302      	movs	r3, #2
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
 80022f8:	2302      	movs	r3, #2
 80022fa:	623b      	str	r3, [r7, #32]
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2202      	movs	r2, #2
 800230a:	61ba      	str	r2, [r7, #24]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	fa92 f2a2 	rbit	r2, r2
 8002312:	617a      	str	r2, [r7, #20]
  return result;
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	fab2 f282 	clz	r2, r2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f042 0220 	orr.w	r2, r2, #32
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f002 021f 	and.w	r2, r2, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e079      	b.n	800242a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	491a      	ldr	r1, [pc, #104]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7fe fd40 	bl	8000dcc <HAL_GetTick>
 800234c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7fe fd3c 	bl	8000dcc <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e061      	b.n	800242a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <HAL_RCC_ClockConfig+0x260>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x25c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d214      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_ClockConfig+0x25c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 0207 	bic.w	r2, r3, #7
 800238e:	4906      	ldr	r1, [pc, #24]	; (80023a8 <HAL_RCC_ClockConfig+0x25c>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <HAL_RCC_ClockConfig+0x25c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e040      	b.n	800242a <HAL_RCC_ClockConfig+0x2de>
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_ClockConfig+0x2e8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	491a      	ldr	r1, [pc, #104]	; (8002434 <HAL_RCC_ClockConfig+0x2e8>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_RCC_ClockConfig+0x2e8>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4912      	ldr	r1, [pc, #72]	; (8002434 <HAL_RCC_ClockConfig+0x2e8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023ee:	f000 f829 	bl	8002444 <HAL_RCC_GetSysClockFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <HAL_RCC_ClockConfig+0x2e8>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fc:	22f0      	movs	r2, #240	; 0xf0
 80023fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	fa92 f2a2 	rbit	r2, r2
 8002406:	60fa      	str	r2, [r7, #12]
  return result;
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	40d3      	lsrs	r3, r2
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x2ec>)
 8002414:	5cd3      	ldrb	r3, [r2, r3]
 8002416:	fa21 f303 	lsr.w	r3, r1, r3
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_RCC_ClockConfig+0x2f0>)
 800241c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_RCC_ClockConfig+0x2f4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fc8e 	bl	8000d44 <HAL_InitTick>
  
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3778      	adds	r7, #120	; 0x78
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	080040f0 	.word	0x080040f0
 800243c:	2000000c 	.word	0x2000000c
 8002440:	20000010 	.word	0x20000010

08002444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b08b      	sub	sp, #44	; 0x2c
 8002448:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	2300      	movs	r3, #0
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x30>
 800246e:	2b08      	cmp	r3, #8
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x36>
 8002472:	e03c      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002476:	623b      	str	r3, [r7, #32]
      break;
 8002478:	e03c      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002480:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002484:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	fa92 f2a2 	rbit	r2, r2
 800248c:	607a      	str	r2, [r7, #4]
  return result;
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	40d3      	lsrs	r3, r2
 8002498:	4a1c      	ldr	r2, [pc, #112]	; (800250c <HAL_RCC_GetSysClockFreq+0xc8>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	220f      	movs	r2, #15
 80024a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	fa92 f2a2 	rbit	r2, r2
 80024b0:	60fa      	str	r2, [r7, #12]
  return result;
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	fab2 f282 	clz	r2, r2
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	40d3      	lsrs	r3, r2
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024cc:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	e004      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4a0c      	ldr	r2, [pc, #48]	; (8002514 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	623b      	str	r3, [r7, #32]
      break;
 80024ec:	e002      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024f0:	623b      	str	r3, [r7, #32]
      break;
 80024f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f4:	6a3b      	ldr	r3, [r7, #32]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	372c      	adds	r7, #44	; 0x2c
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	007a1200 	.word	0x007a1200
 800250c:	08004100 	.word	0x08004100
 8002510:	08004110 	.word	0x08004110
 8002514:	003d0900 	.word	0x003d0900

08002518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e049      	b.n	80025be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe f9a4 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f000 f978 	bl	800284c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e038      	b.n	8002652 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_TIM_Base_Start+0x98>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00e      	beq.n	8002610 <HAL_TIM_Base_Start+0x48>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d009      	beq.n	8002610 <HAL_TIM_Base_Start+0x48>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_TIM_Base_Start+0x9c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d004      	beq.n	8002610 <HAL_TIM_Base_Start+0x48>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_TIM_Base_Start+0xa0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d115      	bne.n	800263c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_TIM_Base_Start+0xa4>)
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b06      	cmp	r3, #6
 8002620:	d015      	beq.n	800264e <HAL_TIM_Base_Start+0x86>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d011      	beq.n	800264e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263a:	e008      	b.n	800264e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e000      	b.n	8002650 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40014000 	.word	0x40014000
 800266c:	00010007 	.word	0x00010007

08002670 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <HAL_TIM_Base_Stop+0x38>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a1a      	ldr	r2, [r3, #32]
 800268e:	f240 4344 	movw	r3, #1092	; 0x444
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d107      	bne.n	80026a8 <HAL_TIM_Base_Stop+0x38>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_ConfigClockSource+0x18>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e0b5      	b.n	8002842 <HAL_TIM_ConfigClockSource+0x184>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002700:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	d03e      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0xd4>
 8002714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002718:	f200 8087 	bhi.w	800282a <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	f000 8085 	beq.w	800282e <HAL_TIM_ConfigClockSource+0x170>
 8002724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002728:	d87f      	bhi.n	800282a <HAL_TIM_ConfigClockSource+0x16c>
 800272a:	2b70      	cmp	r3, #112	; 0x70
 800272c:	d01a      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0xa6>
 800272e:	2b70      	cmp	r3, #112	; 0x70
 8002730:	d87b      	bhi.n	800282a <HAL_TIM_ConfigClockSource+0x16c>
 8002732:	2b60      	cmp	r3, #96	; 0x60
 8002734:	d050      	beq.n	80027d8 <HAL_TIM_ConfigClockSource+0x11a>
 8002736:	2b60      	cmp	r3, #96	; 0x60
 8002738:	d877      	bhi.n	800282a <HAL_TIM_ConfigClockSource+0x16c>
 800273a:	2b50      	cmp	r3, #80	; 0x50
 800273c:	d03c      	beq.n	80027b8 <HAL_TIM_ConfigClockSource+0xfa>
 800273e:	2b50      	cmp	r3, #80	; 0x50
 8002740:	d873      	bhi.n	800282a <HAL_TIM_ConfigClockSource+0x16c>
 8002742:	2b40      	cmp	r3, #64	; 0x40
 8002744:	d058      	beq.n	80027f8 <HAL_TIM_ConfigClockSource+0x13a>
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d86f      	bhi.n	800282a <HAL_TIM_ConfigClockSource+0x16c>
 800274a:	2b30      	cmp	r3, #48	; 0x30
 800274c:	d064      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0x15a>
 800274e:	2b30      	cmp	r3, #48	; 0x30
 8002750:	d86b      	bhi.n	800282a <HAL_TIM_ConfigClockSource+0x16c>
 8002752:	2b20      	cmp	r3, #32
 8002754:	d060      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0x15a>
 8002756:	2b20      	cmp	r3, #32
 8002758:	d867      	bhi.n	800282a <HAL_TIM_ConfigClockSource+0x16c>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d05c      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0x15a>
 800275e:	2b10      	cmp	r3, #16
 8002760:	d05a      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002762:	e062      	b.n	800282a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f000 f95c 	bl	8002a30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002786:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	609a      	str	r2, [r3, #8]
      break;
 8002790:	e04e      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6899      	ldr	r1, [r3, #8]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f000 f945 	bl	8002a30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027b4:	609a      	str	r2, [r3, #8]
      break;
 80027b6:	e03b      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	461a      	mov	r2, r3
 80027c6:	f000 f8b9 	bl	800293c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2150      	movs	r1, #80	; 0x50
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f912 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027d6:	e02b      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	461a      	mov	r2, r3
 80027e6:	f000 f8d8 	bl	800299a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2160      	movs	r1, #96	; 0x60
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f902 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 80027f6:	e01b      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	461a      	mov	r2, r3
 8002806:	f000 f899 	bl	800293c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2140      	movs	r1, #64	; 0x40
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f8f2 	bl	80029fa <TIM_ITRx_SetConfig>
      break;
 8002816:	e00b      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f000 f8e9 	bl	80029fa <TIM_ITRx_SetConfig>
        break;
 8002828:	e002      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800282e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a32      	ldr	r2, [pc, #200]	; (8002928 <TIM_Base_SetConfig+0xdc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_Base_SetConfig+0x28>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286a:	d003      	beq.n	8002874 <TIM_Base_SetConfig+0x28>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a2f      	ldr	r2, [pc, #188]	; (800292c <TIM_Base_SetConfig+0xe0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a27      	ldr	r2, [pc, #156]	; (8002928 <TIM_Base_SetConfig+0xdc>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d013      	beq.n	80028b6 <TIM_Base_SetConfig+0x6a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d00f      	beq.n	80028b6 <TIM_Base_SetConfig+0x6a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a24      	ldr	r2, [pc, #144]	; (800292c <TIM_Base_SetConfig+0xe0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0x6a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a23      	ldr	r2, [pc, #140]	; (8002930 <TIM_Base_SetConfig+0xe4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0x6a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <TIM_Base_SetConfig+0xe8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0x6a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a21      	ldr	r2, [pc, #132]	; (8002938 <TIM_Base_SetConfig+0xec>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <TIM_Base_SetConfig+0xdc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00b      	beq.n	800290c <TIM_Base_SetConfig+0xc0>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <TIM_Base_SetConfig+0xe4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <TIM_Base_SetConfig+0xc0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <TIM_Base_SetConfig+0xe8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d003      	beq.n	800290c <TIM_Base_SetConfig+0xc0>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <TIM_Base_SetConfig+0xec>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d103      	bne.n	8002914 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	615a      	str	r2, [r3, #20]
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400
 8002930:	40014000 	.word	0x40014000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800

0800293c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0201 	bic.w	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f023 030a 	bic.w	r3, r3, #10
 8002978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800299a:	b480      	push	{r7}
 800299c:	b087      	sub	sp, #28
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f023 0210 	bic.w	r2, r3, #16
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	031b      	lsls	r3, r3, #12
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	621a      	str	r2, [r3, #32]
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b085      	sub	sp, #20
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f043 0307 	orr.w	r3, r3, #7
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	609a      	str	r2, [r3, #8]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	021a      	lsls	r2, r3, #8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	609a      	str	r2, [r3, #8]
}
 8002a64:	bf00      	nop
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e054      	b.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a24      	ldr	r2, [pc, #144]	; (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d108      	bne.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ab8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00e      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d009      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d004      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a11      	ldr	r2, [pc, #68]	; (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10c      	bne.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40014000 	.word	0x40014000

08002b4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b5e:	2b84      	cmp	r3, #132	; 0x84
 8002b60:	d005      	beq.n	8002b6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3303      	adds	r3, #3
 8002b6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b80:	f000 fad6 	bl	8003130 <vTaskStartScheduler>
  
  return osOK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8c:	b089      	sub	sp, #36	; 0x24
 8002b8e:	af04      	add	r7, sp, #16
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <osThreadCreate+0x54>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d01c      	beq.n	8002bde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685c      	ldr	r4, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681d      	ldr	r5, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691e      	ldr	r6, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ffc8 	bl	8002b4c <makeFreeRtosPriority>
 8002bbc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bc6:	9202      	str	r2, [sp, #8]
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	9100      	str	r1, [sp, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4632      	mov	r2, r6
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f000 f8ed 	bl	8002db2 <xTaskCreateStatic>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e01c      	b.n	8002c18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685c      	ldr	r4, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bea:	b29e      	uxth	r6, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ffaa 	bl	8002b4c <makeFreeRtosPriority>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	9200      	str	r2, [sp, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4632      	mov	r2, r6
 8002c06:	4629      	mov	r1, r5
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f000 f92e 	bl	8002e6a <xTaskCreate>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d001      	beq.n	8002c18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	e000      	b.n	8002c1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c18:	68fb      	ldr	r3, [r7, #12]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <osDelay+0x16>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	e000      	b.n	8002c3a <osDelay+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fa44 	bl	80030c8 <vTaskDelay>
  
  return osOK;
 8002c40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f103 0208 	add.w	r2, r3, #8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f103 0208 	add.w	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f103 0208 	add.w	r2, r3, #8
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d103      	bne.n	8002d0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e00c      	b.n	8002d26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3308      	adds	r3, #8
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e002      	b.n	8002d1a <vListInsert+0x2e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d2f6      	bcs.n	8002d14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b085      	sub	sp, #20
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6892      	ldr	r2, [r2, #8]
 8002d74:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6852      	ldr	r2, [r2, #4]
 8002d7e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d103      	bne.n	8002d92 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b08e      	sub	sp, #56	; 0x38
 8002db6:	af04      	add	r7, sp, #16
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <xTaskCreateStatic+0x46>
	__asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	61fb      	str	r3, [r7, #28]
}
 8002df4:	bf00      	nop
 8002df6:	e7fe      	b.n	8002df6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002df8:	2354      	movs	r3, #84	; 0x54
 8002dfa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2b54      	cmp	r3, #84	; 0x54
 8002e00:	d00a      	beq.n	8002e18 <xTaskCreateStatic+0x66>
	__asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	61bb      	str	r3, [r7, #24]
}
 8002e14:	bf00      	nop
 8002e16:	e7fe      	b.n	8002e16 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01e      	beq.n	8002e5c <xTaskCreateStatic+0xaa>
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e36:	2300      	movs	r3, #0
 8002e38:	9303      	str	r3, [sp, #12]
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	f107 0314 	add.w	r3, r7, #20
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f850 	bl	8002ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e56:	f000 f8cd 	bl	8002ff4 <prvAddNewTaskToReadyList>
 8002e5a:	e001      	b.n	8002e60 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e60:	697b      	ldr	r3, [r7, #20]
	}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3728      	adds	r7, #40	; 0x28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b08c      	sub	sp, #48	; 0x30
 8002e6e:	af04      	add	r7, sp, #16
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 feea 	bl	8003c58 <pvPortMalloc>
 8002e84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e8c:	2054      	movs	r0, #84	; 0x54
 8002e8e:	f000 fee3 	bl	8003c58 <pvPortMalloc>
 8002e92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002ea0:	e005      	b.n	8002eae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002ea2:	6978      	ldr	r0, [r7, #20]
 8002ea4:	f000 ff9c 	bl	8003de0 <vPortFree>
 8002ea8:	e001      	b.n	8002eae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9303      	str	r3, [sp, #12]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	9302      	str	r3, [sp, #8]
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f80e 	bl	8002ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ed8:	69f8      	ldr	r0, [r7, #28]
 8002eda:	f000 f88b 	bl	8002ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	e002      	b.n	8002eea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002eea:	69bb      	ldr	r3, [r7, #24]
	}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f023 0307 	bic.w	r3, r3, #7
 8002f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	617b      	str	r3, [r7, #20]
}
 8002f38:	bf00      	nop
 8002f3a:	e7fe      	b.n	8002f3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e012      	b.n	8002f68 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	7819      	ldrb	r1, [r3, #0]
 8002f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3334      	adds	r3, #52	; 0x34
 8002f52:	460a      	mov	r2, r1
 8002f54:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3301      	adds	r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2b0f      	cmp	r3, #15
 8002f6c:	d9e9      	bls.n	8002f42 <prvInitialiseNewTask+0x4e>
 8002f6e:	e000      	b.n	8002f72 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002f70:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	2b06      	cmp	r3, #6
 8002f7e:	d901      	bls.n	8002f84 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f80:	2306      	movs	r3, #6
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	2200      	movs	r2, #0
 8002f94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fe75 	bl	8002c8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fe70 	bl	8002c8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	f1c3 0207 	rsb	r2, r3, #7
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	68f9      	ldr	r1, [r7, #12]
 8002fd2:	69b8      	ldr	r0, [r7, #24]
 8002fd4:	f000 fc30 	bl	8003838 <pxPortInitialiseStack>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fea:	bf00      	nop
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ffc:	f000 fd4a 	bl	8003a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <prvAddNewTaskToReadyList+0xb8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	4a29      	ldr	r2, [pc, #164]	; (80030ac <prvAddNewTaskToReadyList+0xb8>)
 8003008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003012:	4a27      	ldr	r2, [pc, #156]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <prvAddNewTaskToReadyList+0xb8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d110      	bne.n	8003042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003020:	f000 fac2 	bl	80035a8 <prvInitialiseTaskLists>
 8003024:	e00d      	b.n	8003042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003026:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <prvAddNewTaskToReadyList+0xc0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	429a      	cmp	r2, r3
 800303a:	d802      	bhi.n	8003042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <prvAddNewTaskToReadyList+0xc4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <prvAddNewTaskToReadyList+0xc4>)
 800304a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <prvAddNewTaskToReadyList+0xc8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <prvAddNewTaskToReadyList+0xc8>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <prvAddNewTaskToReadyList+0xcc>)
 800306c:	441a      	add	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f7ff fe15 	bl	8002ca4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800307a:	f000 fd3b 	bl	8003af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <prvAddNewTaskToReadyList+0xc0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00e      	beq.n	80030a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	429a      	cmp	r2, r3
 8003092:	d207      	bcs.n	80030a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <prvAddNewTaskToReadyList+0xd0>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	2000038c 	.word	0x2000038c
 80030b0:	2000028c 	.word	0x2000028c
 80030b4:	20000398 	.word	0x20000398
 80030b8:	200003a8 	.word	0x200003a8
 80030bc:	20000394 	.word	0x20000394
 80030c0:	20000290 	.word	0x20000290
 80030c4:	e000ed04 	.word	0xe000ed04

080030c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d017      	beq.n	800310a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <vTaskDelay+0x60>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <vTaskDelay+0x30>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60bb      	str	r3, [r7, #8]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030f8:	f000 f87a 	bl	80031f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fb34 	bl	800376c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003104:	f000 f882 	bl	800320c <xTaskResumeAll>
 8003108:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <vTaskDelay+0x64>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	200003b4 	.word	0x200003b4
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800313e:	463a      	mov	r2, r7
 8003140:	1d39      	adds	r1, r7, #4
 8003142:	f107 0308 	add.w	r3, r7, #8
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd f842 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	9202      	str	r2, [sp, #8]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	2300      	movs	r3, #0
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	2300      	movs	r3, #0
 800315c:	460a      	mov	r2, r1
 800315e:	491e      	ldr	r1, [pc, #120]	; (80031d8 <vTaskStartScheduler+0xa8>)
 8003160:	481e      	ldr	r0, [pc, #120]	; (80031dc <vTaskStartScheduler+0xac>)
 8003162:	f7ff fe26 	bl	8002db2 <xTaskCreateStatic>
 8003166:	4603      	mov	r3, r0
 8003168:	4a1d      	ldr	r2, [pc, #116]	; (80031e0 <vTaskStartScheduler+0xb0>)
 800316a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800316c:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <vTaskStartScheduler+0xb0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003174:	2301      	movs	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e001      	b.n	800317e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d116      	bne.n	80031b2 <vTaskStartScheduler+0x82>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	613b      	str	r3, [r7, #16]
}
 8003196:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <vTaskStartScheduler+0xb4>)
 800319a:	f04f 32ff 	mov.w	r2, #4294967295
 800319e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <vTaskStartScheduler+0xb8>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <vTaskStartScheduler+0xbc>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031ac:	f000 fbd0 	bl	8003950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031b0:	e00e      	b.n	80031d0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d10a      	bne.n	80031d0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	60fb      	str	r3, [r7, #12]
}
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <vTaskStartScheduler+0x9e>
}
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	080040e8 	.word	0x080040e8
 80031dc:	08003579 	.word	0x08003579
 80031e0:	200003b0 	.word	0x200003b0
 80031e4:	200003ac 	.word	0x200003ac
 80031e8:	20000398 	.word	0x20000398
 80031ec:	20000390 	.word	0x20000390

080031f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <vTaskSuspendAll+0x18>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	4a03      	ldr	r2, [pc, #12]	; (8003208 <vTaskSuspendAll+0x18>)
 80031fc:	6013      	str	r3, [r2, #0]
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	200003b4 	.word	0x200003b4

0800320c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <xTaskResumeAll+0x114>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <xTaskResumeAll+0x2c>
	__asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	603b      	str	r3, [r7, #0]
}
 8003234:	bf00      	nop
 8003236:	e7fe      	b.n	8003236 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003238:	f000 fc2c 	bl	8003a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <xTaskResumeAll+0x114>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3b01      	subs	r3, #1
 8003242:	4a37      	ldr	r2, [pc, #220]	; (8003320 <xTaskResumeAll+0x114>)
 8003244:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <xTaskResumeAll+0x114>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d161      	bne.n	8003312 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800324e:	4b35      	ldr	r3, [pc, #212]	; (8003324 <xTaskResumeAll+0x118>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d05d      	beq.n	8003312 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003256:	e02e      	b.n	80032b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003258:	4b33      	ldr	r3, [pc, #204]	; (8003328 <xTaskResumeAll+0x11c>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3318      	adds	r3, #24
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fd7a 	bl	8002d5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3304      	adds	r3, #4
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fd75 	bl	8002d5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	4b2b      	ldr	r3, [pc, #172]	; (800332c <xTaskResumeAll+0x120>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4313      	orrs	r3, r2
 8003282:	4a2a      	ldr	r2, [pc, #168]	; (800332c <xTaskResumeAll+0x120>)
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4a27      	ldr	r2, [pc, #156]	; (8003330 <xTaskResumeAll+0x124>)
 8003294:	441a      	add	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3304      	adds	r3, #4
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7ff fd01 	bl	8002ca4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <xTaskResumeAll+0x128>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d302      	bcc.n	80032b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <xTaskResumeAll+0x12c>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <xTaskResumeAll+0x11c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1cc      	bne.n	8003258 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032c4:	f000 fa0e 	bl	80036e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032c8:	4b1c      	ldr	r3, [pc, #112]	; (800333c <xTaskResumeAll+0x130>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032d4:	f000 f836 	bl	8003344 <xTaskIncrementTick>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <xTaskResumeAll+0x12c>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f1      	bne.n	80032d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <xTaskResumeAll+0x130>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032f6:	4b10      	ldr	r3, [pc, #64]	; (8003338 <xTaskResumeAll+0x12c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032fe:	2301      	movs	r3, #1
 8003300:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <xTaskResumeAll+0x134>)
 8003304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003312:	f000 fbef 	bl	8003af4 <vPortExitCritical>

	return xAlreadyYielded;
 8003316:	68bb      	ldr	r3, [r7, #8]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	200003b4 	.word	0x200003b4
 8003324:	2000038c 	.word	0x2000038c
 8003328:	2000034c 	.word	0x2000034c
 800332c:	20000394 	.word	0x20000394
 8003330:	20000290 	.word	0x20000290
 8003334:	2000028c 	.word	0x2000028c
 8003338:	200003a0 	.word	0x200003a0
 800333c:	2000039c 	.word	0x2000039c
 8003340:	e000ed04 	.word	0xe000ed04

08003344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800334e:	4b51      	ldr	r3, [pc, #324]	; (8003494 <xTaskIncrementTick+0x150>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 808d 	bne.w	8003472 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003358:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <xTaskIncrementTick+0x154>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003360:	4a4d      	ldr	r2, [pc, #308]	; (8003498 <xTaskIncrementTick+0x154>)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d120      	bne.n	80033ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800336c:	4b4b      	ldr	r3, [pc, #300]	; (800349c <xTaskIncrementTick+0x158>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <xTaskIncrementTick+0x48>
	__asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	603b      	str	r3, [r7, #0]
}
 8003388:	bf00      	nop
 800338a:	e7fe      	b.n	800338a <xTaskIncrementTick+0x46>
 800338c:	4b43      	ldr	r3, [pc, #268]	; (800349c <xTaskIncrementTick+0x158>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <xTaskIncrementTick+0x15c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a41      	ldr	r2, [pc, #260]	; (800349c <xTaskIncrementTick+0x158>)
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4a41      	ldr	r2, [pc, #260]	; (80034a0 <xTaskIncrementTick+0x15c>)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <xTaskIncrementTick+0x160>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a3f      	ldr	r2, [pc, #252]	; (80034a4 <xTaskIncrementTick+0x160>)
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	f000 f99b 	bl	80036e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033ae:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <xTaskIncrementTick+0x164>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d34d      	bcc.n	8003454 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <xTaskIncrementTick+0x158>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <xTaskIncrementTick+0x82>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <xTaskIncrementTick+0x84>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <xTaskIncrementTick+0x164>)
 80033ce:	f04f 32ff 	mov.w	r2, #4294967295
 80033d2:	601a      	str	r2, [r3, #0]
					break;
 80033d4:	e03e      	b.n	8003454 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <xTaskIncrementTick+0x158>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d203      	bcs.n	80033f6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033ee:	4a2e      	ldr	r2, [pc, #184]	; (80034a8 <xTaskIncrementTick+0x164>)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6013      	str	r3, [r2, #0]
						break;
 80033f4:	e02e      	b.n	8003454 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fcaf 	bl	8002d5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	3318      	adds	r3, #24
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fca6 	bl	8002d5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	2201      	movs	r2, #1
 8003418:	409a      	lsls	r2, r3
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <xTaskIncrementTick+0x168>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4313      	orrs	r3, r2
 8003420:	4a22      	ldr	r2, [pc, #136]	; (80034ac <xTaskIncrementTick+0x168>)
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4a1f      	ldr	r2, [pc, #124]	; (80034b0 <xTaskIncrementTick+0x16c>)
 8003432:	441a      	add	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3304      	adds	r3, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f7ff fc32 	bl	8002ca4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <xTaskIncrementTick+0x170>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	429a      	cmp	r2, r3
 800344c:	d3b4      	bcc.n	80033b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800344e:	2301      	movs	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003452:	e7b1      	b.n	80033b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003454:	4b17      	ldr	r3, [pc, #92]	; (80034b4 <xTaskIncrementTick+0x170>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	4915      	ldr	r1, [pc, #84]	; (80034b0 <xTaskIncrementTick+0x16c>)
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d907      	bls.n	800347c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800346c:	2301      	movs	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e004      	b.n	800347c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <xTaskIncrementTick+0x174>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <xTaskIncrementTick+0x174>)
 800347a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <xTaskIncrementTick+0x178>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003488:	697b      	ldr	r3, [r7, #20]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200003b4 	.word	0x200003b4
 8003498:	20000390 	.word	0x20000390
 800349c:	20000344 	.word	0x20000344
 80034a0:	20000348 	.word	0x20000348
 80034a4:	200003a4 	.word	0x200003a4
 80034a8:	200003ac 	.word	0x200003ac
 80034ac:	20000394 	.word	0x20000394
 80034b0:	20000290 	.word	0x20000290
 80034b4:	2000028c 	.word	0x2000028c
 80034b8:	2000039c 	.word	0x2000039c
 80034bc:	200003a0 	.word	0x200003a0

080034c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034c6:	4b27      	ldr	r3, [pc, #156]	; (8003564 <vTaskSwitchContext+0xa4>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <vTaskSwitchContext+0xa8>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034d4:	e03f      	b.n	8003556 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80034d6:	4b24      	ldr	r3, [pc, #144]	; (8003568 <vTaskSwitchContext+0xa8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034dc:	4b23      	ldr	r3, [pc, #140]	; (800356c <vTaskSwitchContext+0xac>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034ea:	7afb      	ldrb	r3, [r7, #11]
 80034ec:	f1c3 031f 	rsb	r3, r3, #31
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	491f      	ldr	r1, [pc, #124]	; (8003570 <vTaskSwitchContext+0xb0>)
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	607b      	str	r3, [r7, #4]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <vTaskSwitchContext+0x5a>
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <vTaskSwitchContext+0xb0>)
 8003528:	4413      	add	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	3308      	adds	r3, #8
 800353e:	429a      	cmp	r2, r3
 8003540:	d104      	bne.n	800354c <vTaskSwitchContext+0x8c>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	4a08      	ldr	r2, [pc, #32]	; (8003574 <vTaskSwitchContext+0xb4>)
 8003554:	6013      	str	r3, [r2, #0]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	200003b4 	.word	0x200003b4
 8003568:	200003a0 	.word	0x200003a0
 800356c:	20000394 	.word	0x20000394
 8003570:	20000290 	.word	0x20000290
 8003574:	2000028c 	.word	0x2000028c

08003578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003580:	f000 f852 	bl	8003628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <prvIdleTask+0x28>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d9f9      	bls.n	8003580 <prvIdleTask+0x8>
			{
				taskYIELD();
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <prvIdleTask+0x2c>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800359c:	e7f0      	b.n	8003580 <prvIdleTask+0x8>
 800359e:	bf00      	nop
 80035a0:	20000290 	.word	0x20000290
 80035a4:	e000ed04 	.word	0xe000ed04

080035a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	e00c      	b.n	80035ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4a12      	ldr	r2, [pc, #72]	; (8003608 <prvInitialiseTaskLists+0x60>)
 80035c0:	4413      	add	r3, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fb41 	bl	8002c4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3301      	adds	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b06      	cmp	r3, #6
 80035d2:	d9ef      	bls.n	80035b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035d4:	480d      	ldr	r0, [pc, #52]	; (800360c <prvInitialiseTaskLists+0x64>)
 80035d6:	f7ff fb38 	bl	8002c4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035da:	480d      	ldr	r0, [pc, #52]	; (8003610 <prvInitialiseTaskLists+0x68>)
 80035dc:	f7ff fb35 	bl	8002c4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035e0:	480c      	ldr	r0, [pc, #48]	; (8003614 <prvInitialiseTaskLists+0x6c>)
 80035e2:	f7ff fb32 	bl	8002c4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035e6:	480c      	ldr	r0, [pc, #48]	; (8003618 <prvInitialiseTaskLists+0x70>)
 80035e8:	f7ff fb2f 	bl	8002c4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035ec:	480b      	ldr	r0, [pc, #44]	; (800361c <prvInitialiseTaskLists+0x74>)
 80035ee:	f7ff fb2c 	bl	8002c4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <prvInitialiseTaskLists+0x78>)
 80035f4:	4a05      	ldr	r2, [pc, #20]	; (800360c <prvInitialiseTaskLists+0x64>)
 80035f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <prvInitialiseTaskLists+0x7c>)
 80035fa:	4a05      	ldr	r2, [pc, #20]	; (8003610 <prvInitialiseTaskLists+0x68>)
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000290 	.word	0x20000290
 800360c:	2000031c 	.word	0x2000031c
 8003610:	20000330 	.word	0x20000330
 8003614:	2000034c 	.word	0x2000034c
 8003618:	20000360 	.word	0x20000360
 800361c:	20000378 	.word	0x20000378
 8003620:	20000344 	.word	0x20000344
 8003624:	20000348 	.word	0x20000348

08003628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800362e:	e019      	b.n	8003664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003630:	f000 fa30 	bl	8003a94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003634:	4b10      	ldr	r3, [pc, #64]	; (8003678 <prvCheckTasksWaitingTermination+0x50>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fb8c 	bl	8002d5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003646:	4b0d      	ldr	r3, [pc, #52]	; (800367c <prvCheckTasksWaitingTermination+0x54>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3b01      	subs	r3, #1
 800364c:	4a0b      	ldr	r2, [pc, #44]	; (800367c <prvCheckTasksWaitingTermination+0x54>)
 800364e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <prvCheckTasksWaitingTermination+0x58>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	4a0a      	ldr	r2, [pc, #40]	; (8003680 <prvCheckTasksWaitingTermination+0x58>)
 8003658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800365a:	f000 fa4b 	bl	8003af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f810 	bl	8003684 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <prvCheckTasksWaitingTermination+0x58>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e1      	bne.n	8003630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000360 	.word	0x20000360
 800367c:	2000038c 	.word	0x2000038c
 8003680:	20000374 	.word	0x20000374

08003684 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003692:	2b00      	cmp	r3, #0
 8003694:	d108      	bne.n	80036a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fba0 	bl	8003de0 <vPortFree>
				vPortFree( pxTCB );
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fb9d 	bl	8003de0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036a6:	e018      	b.n	80036da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d103      	bne.n	80036ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fb94 	bl	8003de0 <vPortFree>
	}
 80036b8:	e00f      	b.n	80036da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d00a      	beq.n	80036da <prvDeleteTCB+0x56>
	__asm volatile
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	60fb      	str	r3, [r7, #12]
}
 80036d6:	bf00      	nop
 80036d8:	e7fe      	b.n	80036d8 <prvDeleteTCB+0x54>
	}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ea:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <prvResetNextTaskUnblockTime+0x44>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <prvResetNextTaskUnblockTime+0x14>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <prvResetNextTaskUnblockTime+0x16>
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <prvResetNextTaskUnblockTime+0x48>)
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003706:	e008      	b.n	800371a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <prvResetNextTaskUnblockTime+0x44>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <prvResetNextTaskUnblockTime+0x48>)
 8003718:	6013      	str	r3, [r2, #0]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000344 	.word	0x20000344
 800372c:	200003ac 	.word	0x200003ac

08003730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003736:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <xTaskGetSchedulerState+0x34>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800373e:	2301      	movs	r3, #1
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	e008      	b.n	8003756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <xTaskGetSchedulerState+0x38>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800374c:	2302      	movs	r3, #2
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	e001      	b.n	8003756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003756:	687b      	ldr	r3, [r7, #4]
	}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000398 	.word	0x20000398
 8003768:	200003b4 	.word	0x200003b4

0800376c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003776:	4b29      	ldr	r3, [pc, #164]	; (800381c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800377c:	4b28      	ldr	r3, [pc, #160]	; (8003820 <prvAddCurrentTaskToDelayedList+0xb4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3304      	adds	r3, #4
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff faeb 	bl	8002d5e <uxListRemove>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	2201      	movs	r2, #1
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43da      	mvns	r2, r3
 800379c:	4b21      	ldr	r3, [pc, #132]	; (8003824 <prvAddCurrentTaskToDelayedList+0xb8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4013      	ands	r3, r2
 80037a2:	4a20      	ldr	r2, [pc, #128]	; (8003824 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d10a      	bne.n	80037c4 <prvAddCurrentTaskToDelayedList+0x58>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	481a      	ldr	r0, [pc, #104]	; (8003828 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037be:	f7ff fa71 	bl	8002ca4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037c2:	e026      	b.n	8003812 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037cc:	4b14      	ldr	r3, [pc, #80]	; (8003820 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d209      	bcs.n	80037f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <prvAddCurrentTaskToDelayedList+0xc0>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f7ff fa7f 	bl	8002cec <vListInsert>
}
 80037ee:	e010      	b.n	8003812 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <prvAddCurrentTaskToDelayedList+0xc4>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f7ff fa75 	bl	8002cec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d202      	bcs.n	8003812 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800380c:	4a09      	ldr	r2, [pc, #36]	; (8003834 <prvAddCurrentTaskToDelayedList+0xc8>)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6013      	str	r3, [r2, #0]
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000390 	.word	0x20000390
 8003820:	2000028c 	.word	0x2000028c
 8003824:	20000394 	.word	0x20000394
 8003828:	20000378 	.word	0x20000378
 800382c:	20000348 	.word	0x20000348
 8003830:	20000344 	.word	0x20000344
 8003834:	200003ac 	.word	0x200003ac

08003838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3b04      	subs	r3, #4
 8003848:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3b04      	subs	r3, #4
 8003856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3b04      	subs	r3, #4
 8003866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003868:	4a0c      	ldr	r2, [pc, #48]	; (800389c <pxPortInitialiseStack+0x64>)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3b14      	subs	r3, #20
 8003872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3b04      	subs	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f06f 0202 	mvn.w	r2, #2
 8003886:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3b20      	subs	r3, #32
 800388c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	080038a1 	.word	0x080038a1

080038a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <prvTaskExitError+0x54>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d00a      	beq.n	80038ca <prvTaskExitError+0x2a>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	60fb      	str	r3, [r7, #12]
}
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <prvTaskExitError+0x28>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	60bb      	str	r3, [r7, #8]
}
 80038dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038de:	bf00      	nop
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0fc      	beq.n	80038e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	20000018 	.word	0x20000018
	...

08003900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003900:	4b07      	ldr	r3, [pc, #28]	; (8003920 <pxCurrentTCBConst2>)
 8003902:	6819      	ldr	r1, [r3, #0]
 8003904:	6808      	ldr	r0, [r1, #0]
 8003906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800390a:	f380 8809 	msr	PSP, r0
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f380 8811 	msr	BASEPRI, r0
 800391a:	4770      	bx	lr
 800391c:	f3af 8000 	nop.w

08003920 <pxCurrentTCBConst2>:
 8003920:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop

08003928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003928:	4808      	ldr	r0, [pc, #32]	; (800394c <prvPortStartFirstTask+0x24>)
 800392a:	6800      	ldr	r0, [r0, #0]
 800392c:	6800      	ldr	r0, [r0, #0]
 800392e:	f380 8808 	msr	MSP, r0
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8814 	msr	CONTROL, r0
 800393a:	b662      	cpsie	i
 800393c:	b661      	cpsie	f
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	df00      	svc	0
 8003948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800394a:	bf00      	nop
 800394c:	e000ed08 	.word	0xe000ed08

08003950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003956:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <xPortStartScheduler+0x120>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a46      	ldr	r2, [pc, #280]	; (8003a74 <xPortStartScheduler+0x124>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10a      	bne.n	8003976 <xPortStartScheduler+0x26>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	613b      	str	r3, [r7, #16]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <xPortStartScheduler+0x120>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a3f      	ldr	r2, [pc, #252]	; (8003a78 <xPortStartScheduler+0x128>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10a      	bne.n	8003996 <xPortStartScheduler+0x46>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	60fb      	str	r3, [r7, #12]
}
 8003992:	bf00      	nop
 8003994:	e7fe      	b.n	8003994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003996:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <xPortStartScheduler+0x12c>)
 8003998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	22ff      	movs	r2, #255	; 0xff
 80039a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4b31      	ldr	r3, [pc, #196]	; (8003a80 <xPortStartScheduler+0x130>)
 80039bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039be:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <xPortStartScheduler+0x134>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039c4:	e009      	b.n	80039da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80039c6:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <xPortStartScheduler+0x134>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	4a2d      	ldr	r2, [pc, #180]	; (8003a84 <xPortStartScheduler+0x134>)
 80039ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b80      	cmp	r3, #128	; 0x80
 80039e4:	d0ef      	beq.n	80039c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039e6:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <xPortStartScheduler+0x134>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d00a      	beq.n	8003a08 <xPortStartScheduler+0xb8>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	60bb      	str	r3, [r7, #8]
}
 8003a04:	bf00      	nop
 8003a06:	e7fe      	b.n	8003a06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a08:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <xPortStartScheduler+0x134>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <xPortStartScheduler+0x134>)
 8003a10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a12:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <xPortStartScheduler+0x134>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a1a:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <xPortStartScheduler+0x134>)
 8003a1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a26:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <xPortStartScheduler+0x138>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <xPortStartScheduler+0x138>)
 8003a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <xPortStartScheduler+0x138>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <xPortStartScheduler+0x138>)
 8003a38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a3e:	f000 f8dd 	bl	8003bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <xPortStartScheduler+0x13c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a48:	f000 f8fc 	bl	8003c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <xPortStartScheduler+0x140>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a0f      	ldr	r2, [pc, #60]	; (8003a90 <xPortStartScheduler+0x140>)
 8003a52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a58:	f7ff ff66 	bl	8003928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a5c:	f7ff fd30 	bl	80034c0 <vTaskSwitchContext>
	prvTaskExitError();
 8003a60:	f7ff ff1e 	bl	80038a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00
 8003a74:	410fc271 	.word	0x410fc271
 8003a78:	410fc270 	.word	0x410fc270
 8003a7c:	e000e400 	.word	0xe000e400
 8003a80:	200003b8 	.word	0x200003b8
 8003a84:	200003bc 	.word	0x200003bc
 8003a88:	e000ed20 	.word	0xe000ed20
 8003a8c:	20000018 	.word	0x20000018
 8003a90:	e000ef34 	.word	0xe000ef34

08003a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
	__asm volatile
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	607b      	str	r3, [r7, #4]
}
 8003aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <vPortEnterCritical+0x58>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <vPortEnterCritical+0x58>)
 8003ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <vPortEnterCritical+0x58>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10f      	bne.n	8003ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <vPortEnterCritical+0x5c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	603b      	str	r3, [r7, #0]
}
 8003adc:	bf00      	nop
 8003ade:	e7fe      	b.n	8003ade <vPortEnterCritical+0x4a>
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	20000018 	.word	0x20000018
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <vPortExitCritical+0x50>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <vPortExitCritical+0x24>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	607b      	str	r3, [r7, #4]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <vPortExitCritical+0x50>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <vPortExitCritical+0x50>)
 8003b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <vPortExitCritical+0x50>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d105      	bne.n	8003b36 <vPortExitCritical+0x42>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000018 	.word	0x20000018
	...

08003b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b50:	f3ef 8009 	mrs	r0, PSP
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <pxCurrentTCBConst>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	f01e 0f10 	tst.w	lr, #16
 8003b60:	bf08      	it	eq
 8003b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b6a:	6010      	str	r0, [r2, #0]
 8003b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b74:	f380 8811 	msr	BASEPRI, r0
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f7ff fc9e 	bl	80034c0 <vTaskSwitchContext>
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f380 8811 	msr	BASEPRI, r0
 8003b8c:	bc09      	pop	{r0, r3}
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	6808      	ldr	r0, [r1, #0]
 8003b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b96:	f01e 0f10 	tst.w	lr, #16
 8003b9a:	bf08      	it	eq
 8003b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ba0:	f380 8809 	msr	PSP, r0
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	f3af 8000 	nop.w

08003bb0 <pxCurrentTCBConst>:
 8003bb0:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop

08003bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	607b      	str	r3, [r7, #4]
}
 8003bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bd2:	f7ff fbb7 	bl	8003344 <xTaskIncrementTick>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bdc:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <xPortSysTickHandler+0x40>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f383 8811 	msr	BASEPRI, r3
}
 8003bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <vPortSetupTimerInterrupt+0x34>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <vPortSetupTimerInterrupt+0x38>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <vPortSetupTimerInterrupt+0x3c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <vPortSetupTimerInterrupt+0x40>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <vPortSetupTimerInterrupt+0x44>)
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c1e:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <vPortSetupTimerInterrupt+0x34>)
 8003c20:	2207      	movs	r2, #7
 8003c22:	601a      	str	r2, [r3, #0]
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000e010 	.word	0xe000e010
 8003c34:	e000e018 	.word	0xe000e018
 8003c38:	2000000c 	.word	0x2000000c
 8003c3c:	10624dd3 	.word	0x10624dd3
 8003c40:	e000e014 	.word	0xe000e014

08003c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c54 <vPortEnableVFP+0x10>
 8003c48:	6801      	ldr	r1, [r0, #0]
 8003c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c4e:	6001      	str	r1, [r0, #0]
 8003c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c52:	bf00      	nop
 8003c54:	e000ed88 	.word	0xe000ed88

08003c58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c64:	f7ff fac4 	bl	80031f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c68:	4b58      	ldr	r3, [pc, #352]	; (8003dcc <pvPortMalloc+0x174>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c70:	f000 f910 	bl	8003e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c74:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <pvPortMalloc+0x178>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f040 808e 	bne.w	8003d9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01d      	beq.n	8003cc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c88:	2208      	movs	r2, #8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d014      	beq.n	8003cc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f023 0307 	bic.w	r3, r3, #7
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <pvPortMalloc+0x6c>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	617b      	str	r3, [r7, #20]
}
 8003cc0:	bf00      	nop
 8003cc2:	e7fe      	b.n	8003cc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d069      	beq.n	8003d9e <pvPortMalloc+0x146>
 8003cca:	4b42      	ldr	r3, [pc, #264]	; (8003dd4 <pvPortMalloc+0x17c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d864      	bhi.n	8003d9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cd4:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <pvPortMalloc+0x180>)
 8003cd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <pvPortMalloc+0x180>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cde:	e004      	b.n	8003cea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d903      	bls.n	8003cfc <pvPortMalloc+0xa4>
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f1      	bne.n	8003ce0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cfc:	4b33      	ldr	r3, [pc, #204]	; (8003dcc <pvPortMalloc+0x174>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d04b      	beq.n	8003d9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	4413      	add	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	1ad2      	subs	r2, r2, r3
 8003d20:	2308      	movs	r3, #8
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d91f      	bls.n	8003d68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <pvPortMalloc+0xf8>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	613b      	str	r3, [r7, #16]
}
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1ad2      	subs	r2, r2, r3
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d62:	69b8      	ldr	r0, [r7, #24]
 8003d64:	f000 f8f8 	bl	8003f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <pvPortMalloc+0x17c>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <pvPortMalloc+0x17c>)
 8003d74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d76:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <pvPortMalloc+0x17c>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <pvPortMalloc+0x184>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d203      	bcs.n	8003d8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d82:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <pvPortMalloc+0x17c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <pvPortMalloc+0x184>)
 8003d88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <pvPortMalloc+0x178>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d9e:	f7ff fa35 	bl	800320c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <pvPortMalloc+0x16a>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	60fb      	str	r3, [r7, #12]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <pvPortMalloc+0x168>
	return pvReturn;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3728      	adds	r7, #40	; 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000fc8 	.word	0x20000fc8
 8003dd0:	20000fd4 	.word	0x20000fd4
 8003dd4:	20000fcc 	.word	0x20000fcc
 8003dd8:	20000fc0 	.word	0x20000fc0
 8003ddc:	20000fd0 	.word	0x20000fd0

08003de0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d048      	beq.n	8003e84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003df2:	2308      	movs	r3, #8
 8003df4:	425b      	negs	r3, r3
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4413      	add	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <vPortFree+0xac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <vPortFree+0x44>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	60fb      	str	r3, [r7, #12]
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <vPortFree+0x62>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	60bb      	str	r3, [r7, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <vPortFree+0xac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d019      	beq.n	8003e84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d115      	bne.n	8003e84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <vPortFree+0xac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	401a      	ands	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e68:	f7ff f9c2 	bl	80031f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <vPortFree+0xb0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4413      	add	r3, r2
 8003e76:	4a06      	ldr	r2, [pc, #24]	; (8003e90 <vPortFree+0xb0>)
 8003e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e7a:	6938      	ldr	r0, [r7, #16]
 8003e7c:	f000 f86c 	bl	8003f58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e80:	f7ff f9c4 	bl	800320c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e84:	bf00      	nop
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000fd4 	.word	0x20000fd4
 8003e90:	20000fcc 	.word	0x20000fcc

08003e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ea0:	4b27      	ldr	r3, [pc, #156]	; (8003f40 <prvHeapInit+0xac>)
 8003ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3307      	adds	r3, #7
 8003eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0307 	bic.w	r3, r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <prvHeapInit+0xac>)
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	; (8003f44 <prvHeapInit+0xb0>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <prvHeapInit+0xb0>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4413      	add	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0307 	bic.w	r3, r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <prvHeapInit+0xb4>)
 8003ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ef6:	4b14      	ldr	r3, [pc, #80]	; (8003f48 <prvHeapInit+0xb4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <prvHeapInit+0xb4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	1ad2      	subs	r2, r2, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <prvHeapInit+0xb4>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <prvHeapInit+0xb8>)
 8003f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <prvHeapInit+0xbc>)
 8003f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <prvHeapInit+0xc0>)
 8003f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f32:	601a      	str	r2, [r3, #0]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	200003c0 	.word	0x200003c0
 8003f44:	20000fc0 	.word	0x20000fc0
 8003f48:	20000fc8 	.word	0x20000fc8
 8003f4c:	20000fd0 	.word	0x20000fd0
 8003f50:	20000fcc 	.word	0x20000fcc
 8003f54:	20000fd4 	.word	0x20000fd4

08003f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f60:	4b28      	ldr	r3, [pc, #160]	; (8004004 <prvInsertBlockIntoFreeList+0xac>)
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e002      	b.n	8003f6c <prvInsertBlockIntoFreeList+0x14>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d8f7      	bhi.n	8003f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4413      	add	r3, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d108      	bne.n	8003f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	441a      	add	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d118      	bne.n	8003fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <prvInsertBlockIntoFreeList+0xb0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d00d      	beq.n	8003fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e008      	b.n	8003fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <prvInsertBlockIntoFreeList+0xb0>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e003      	b.n	8003fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d002      	beq.n	8003ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	20000fc0 	.word	0x20000fc0
 8004008:	20000fc8 	.word	0x20000fc8

0800400c <__libc_init_array>:
 800400c:	b570      	push	{r4, r5, r6, lr}
 800400e:	4d0d      	ldr	r5, [pc, #52]	; (8004044 <__libc_init_array+0x38>)
 8004010:	4c0d      	ldr	r4, [pc, #52]	; (8004048 <__libc_init_array+0x3c>)
 8004012:	1b64      	subs	r4, r4, r5
 8004014:	10a4      	asrs	r4, r4, #2
 8004016:	2600      	movs	r6, #0
 8004018:	42a6      	cmp	r6, r4
 800401a:	d109      	bne.n	8004030 <__libc_init_array+0x24>
 800401c:	4d0b      	ldr	r5, [pc, #44]	; (800404c <__libc_init_array+0x40>)
 800401e:	4c0c      	ldr	r4, [pc, #48]	; (8004050 <__libc_init_array+0x44>)
 8004020:	f000 f820 	bl	8004064 <_init>
 8004024:	1b64      	subs	r4, r4, r5
 8004026:	10a4      	asrs	r4, r4, #2
 8004028:	2600      	movs	r6, #0
 800402a:	42a6      	cmp	r6, r4
 800402c:	d105      	bne.n	800403a <__libc_init_array+0x2e>
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	f855 3b04 	ldr.w	r3, [r5], #4
 8004034:	4798      	blx	r3
 8004036:	3601      	adds	r6, #1
 8004038:	e7ee      	b.n	8004018 <__libc_init_array+0xc>
 800403a:	f855 3b04 	ldr.w	r3, [r5], #4
 800403e:	4798      	blx	r3
 8004040:	3601      	adds	r6, #1
 8004042:	e7f2      	b.n	800402a <__libc_init_array+0x1e>
 8004044:	08004120 	.word	0x08004120
 8004048:	08004120 	.word	0x08004120
 800404c:	08004120 	.word	0x08004120
 8004050:	08004124 	.word	0x08004124

08004054 <memset>:
 8004054:	4402      	add	r2, r0
 8004056:	4603      	mov	r3, r0
 8004058:	4293      	cmp	r3, r2
 800405a:	d100      	bne.n	800405e <memset+0xa>
 800405c:	4770      	bx	lr
 800405e:	f803 1b01 	strb.w	r1, [r3], #1
 8004062:	e7f9      	b.n	8004058 <memset+0x4>

08004064 <_init>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr

08004070 <_fini>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr
